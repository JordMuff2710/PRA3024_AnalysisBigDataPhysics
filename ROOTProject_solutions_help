{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Introduction to particle data analysis</h1>\n",
    "\n",
    "This notebook will deal with real data analysis, using the ROOT and RooFit frameworks in python.\n",
    "To learn more about the ROOT framework, you can have a look at <a href=\"https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html\">the ROOT users guide</a> or search for the functionality of a specific class using <a href=\"https://root.cern.ch/doc/v612/\">The ROOT documentation</a>. Especially use the last link extensively, it is your friend! <br/>\n",
    "<br/>\n",
    "<u>The final goal of this notebook, is to obtain the yield (Number of events) of Bs -> Ds pi, in the 2016 LHCb dataset. </u> This number, corrected for the production cross-section of proton-proton to Bs particles, the number of proton-proton collisions, and the efficiency of the LHCb detector, will give us the total branching ratio (BR) of this decay. This is an important observable, and can be directly compared to the theoretical branching ratio (or decay rate), as calculated from the Standard Model.<br/>\n",
    "<br/> <br/>\n",
    "Last week, we generated some proton-proton collision events using Pythia. This is a great generator, however, it only deals with the production (and decay) of the collisions, which is still far away from the data that we observe in for instance the LHCb detector. What happens is the following:<br/>\n",
    "- Particles are created in the collision <br/>\n",
    "- They travel through the detector material, interacting with it (losing energy / doing inelastic collisions) along the way. In sensitive detector elements (silicon, gas), they deposit some energy or create particles that are connected to sensors of some kind <br/>\n",
    "- These deposits are transformed into signals using the readout electronics. All of this has a finite resolution or precision <br/>\n",
    "- The signals are then gathered and 'reconstructed' by the software to correspond to certain particles, that might have flown through the detector. (Think of it as fitting a line through a series of points). Sometimes the software combines random points into a 'track' of a particle, which we then call a 'ghost'.<br/>\n",
    "- The curvature of this track through the magnetic field of LHCb, gives us a measurement of the momentum.\n",
    "- Certain subsystems of the LHCb detector (RICH 1 and 2) detect the Cherenkov radiation emitted by the particles. Since the angle of this light depends on de velocity, together with the momentum this gives us the mass (= particle identification, or PID). However, this is very prone to error.\n",
    "- If the paths of those particle tracks happen to cross each other, it could be considered as the 'vertex' of a decay of a heavier particle inside of the detector. However, it could be an 'accidental' crossing (which we would call 'combinatorial background').\n",
    "- Then, after some basic selection criteria, the information of these particles is stored in an 'ntuple' data format, in a .ROOT file. Ideally, this gives us exactly what the real data 'should' look like, without background.<br/>\n",
    "<br/>\n",
    "All of the above is simulated in the LHCb simulation framework, with all of the possible processes at every step being a random value from some probability distribution. This is called a 'Monte Carlo' simulation. We will start by having a look at a file which is the result of this full MC LHCb simulation chain, for the process of Bs0 --> Ds- pi+, where the Ds- decays as Ds- --> K+ K- pi-. This is a very typical decay mode for LHCb, with very interesting physics, and a large Branching Ratio (BR).<br/>\n",
    "<br/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.14/02\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "MClocation = \"/Users/simoncalo/MC_Bs_Dspi_KKpi_2016_Down_Bs.root\"   # 'Monte Carlo' simulation\n",
    "\n",
    "mcfile = ROOT.TFile(MClocation, \"READONLY\")\n",
    "mctree = mcfile.Get(\"DecayTree\")\n",
    "mctree.SetName(\"MCtree\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's have a brief look at the contents of this 'tree' or 'ntuple'. The variables (called 'branches') are something like particleName_variableName. In our case, the particle names are defined as they appear in the decay chain: lab0 is the Bs, lab1 is the pi, lab2 is the Ds. Then, lab3 and lab4 are the kaons from the Ds decay, and lab5 is the pion from the Ds decay. Note that some variables have the name \"TRUE\" in them: these are the actual generated values for those particles from Pythia for that decay."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======> EVENT:0\n",
      " lab0_ENDVERTEX_X = 3.3166\n",
      " lab0_ENDVERTEX_Y = -1.0571\n",
      " lab0_ENDVERTEX_Z = 28.5821\n",
      " lab0_ENDVERTEX_CHI2 = 0.0783108\n",
      " lab0_ENDVERTEX_NDOF = 1\n",
      " lab0_OWNPV_X    = 0.8288\n",
      " lab0_OWNPV_Y    = -0.217\n",
      " lab0_OWNPV_Z    = 14.0167\n",
      " lab0_OWNPV_CHI2 = 13.1738\n",
      " lab0_OWNPV_NDOF = 39\n",
      " lab0_IP_OWNPV   = 0.0184472\n",
      " lab0_IPCHI2_OWNPV = 1.4958\n",
      " lab0_FD_OWNPV   = 14.8002\n",
      " lab0_FDCHI2_OWNPV = 22658.1\n",
      " lab0_DIRA_OWNPV = 0.999999\n",
      " lab0_P          = 88521.6\n",
      " lab0_PT         = 15769\n",
      " lab0_PE         = 88685.7\n",
      " lab0_PX         = 14911.3\n",
      " lab0_PY         = -5129.86\n",
      " lab0_PZ         = 87105.8\n",
      " lab0_MM         = 5391.35\n",
      " lab0_MMERR      = 14.525\n",
      " lab0_BKGCAT     = 30\n",
      " lab0_TRUEID     = 531\n",
      " lab0_TRUEP_E    = 89084.1\n",
      " lab0_TRUEP_X    = 14970.6\n",
      " lab0_TRUEP_Y    = -5132.64\n",
      " lab0_TRUEP_Z    = 87502.7\n",
      " lab0_TRUEPT     = 15826\n",
      " lab0_TRUEORIGINVERTEX_X = 0.8226\n",
      " lab0_TRUEORIGINVERTEX_Y = -0.2156\n",
      " lab0_TRUEORIGINVERTEX_Z = 14.0421\n",
      " lab0_TRUEENDVERTEX_X = 3.3079\n",
      " lab0_TRUEENDVERTEX_Y = -1.0677\n",
      " lab0_TRUEENDVERTEX_Z = 28.5689\n",
      " lab0_TRUEISSTABLE = 0\n",
      " lab0_TRUETAU    = 0.00297194\n",
      " lab0_LifetimeFit_nPV = 2\n",
      " lab0_LifetimeFit_Dplus_M = 1967.92, \n",
      "                  1956.13\n",
      " lab0_LifetimeFit_Dplus_MERR = 4.9365, \n",
      "                  4.71831\n",
      " lab0_LifetimeFit_Dplus_P = 47899.2, \n",
      "                  47398.7\n",
      " lab0_LifetimeFit_Dplus_ctau = 0.460924, \n",
      "                  0.431988\n",
      " lab0_LifetimeFit_Dplus_ctauErr = 0.00699543, \n",
      "                  0.00713128\n",
      " lab0_LifetimeFit_Dplus_decayLength = 11.2189, \n",
      "                  10.4675\n",
      " lab0_LifetimeFit_Dplus_decayLengthErr = 0.156171, \n",
      "                  0.15984\n",
      " lab0_LifetimeFit_M = 5392.87, \n",
      "                  5431.39\n",
      " lab0_LifetimeFit_MERR = 14.5619, \n",
      "                  15.5151\n",
      " lab0_LifetimeFit_P = 88535.4, \n",
      "                  89018.5\n",
      " lab0_LifetimeFit_PERR = 266.459, \n",
      "                  280.823\n",
      " lab0_LifetimeFit_PV_X = 0.8288, \n",
      "                  0.8552\n",
      " lab0_LifetimeFit_PV_Y = -0.217, \n",
      "                  -0.1478\n",
      " lab0_LifetimeFit_PV_Z = 14.0167, \n",
      "                  -68.7061\n",
      " lab0_LifetimeFit_PV_key = 0, \n",
      "                  1\n",
      " lab0_LifetimeFit_chi2 = 2.71673, \n",
      "                  43958\n",
      " lab0_LifetimeFit_ctau = 0.901486, \n",
      "                  1.35559\n",
      " lab0_LifetimeFit_ctauErr = 0.00674474, \n",
      "                  0.015521\n",
      " lab0_LifetimeFit_decayLength = 14.7998, \n",
      "                  22.2176\n",
      " lab0_LifetimeFit_decayLengthErr = 0.099356, \n",
      "                  0.246356\n",
      " lab0_LifetimeFit_nDOF = 6, \n",
      "                  6\n",
      " lab0_LifetimeFit_nIter = 2, \n",
      "                  3\n",
      " lab0_LifetimeFitConsD_nPV = 2\n",
      " lab0_LifetimeFitConsD_D_splus_M = 1968.3, \n",
      "                  1967.7\n",
      " lab0_LifetimeFitConsD_D_splus_MERR = 0, \n",
      "                  0.123763\n",
      " lab0_LifetimeFitConsD_D_splus_P = 47907.8, \n",
      "                  47659.6\n",
      " lab0_LifetimeFitConsD_D_splus_ctau = 0.46115, \n",
      "                  0.439607\n",
      " lab0_LifetimeFitConsD_D_splus_ctauErr = 0.00634044, \n",
      "                  0.00631386\n",
      " lab0_LifetimeFitConsD_D_splus_decayLength = 11.2242, \n",
      "                  10.6477\n",
      " lab0_LifetimeFitConsD_D_splus_decayLengthErr = 0.139622, \n",
      "                  0.139424\n",
      " lab0_LifetimeFitConsD_M = 5393.42, \n",
      "                  5447.07\n",
      " lab0_LifetimeFitConsD_MERR = 12.6648, \n",
      "                  14.0605\n",
      " lab0_LifetimeFitConsD_P = 88544.1, \n",
      "                  89266.4\n",
      " lab0_LifetimeFitConsD_PERR = 241.098, \n",
      "                  263.606\n",
      " lab0_LifetimeFitConsD_PV_X = 0.8288, \n",
      "                  0.8552\n",
      " lab0_LifetimeFitConsD_PV_Y = -0.217, \n",
      "                  -0.1478\n",
      " lab0_LifetimeFitConsD_PV_Z = 14.0167, \n",
      "                  -68.7061\n",
      " lab0_LifetimeFitConsD_PV_key = 0, \n",
      "                  1\n",
      " lab0_LifetimeFitConsD_chi2 = 2.72259, \n",
      "                  43960.6\n",
      " lab0_LifetimeFitConsD_ctau = 0.901492, \n",
      "                  1.35136\n",
      " lab0_LifetimeFitConsD_ctauErr = 0.00674373, \n",
      "                  0.0154877\n",
      " lab0_LifetimeFitConsD_decayLength = 14.7998, \n",
      "                  22.1461\n",
      " lab0_LifetimeFitConsD_decayLengthErr = 0.09935, \n",
      "                  0.245693\n",
      " lab0_LifetimeFitConsD_nDOF = 7, \n",
      "                  7\n",
      " lab0_LifetimeFitConsD_nIter = 2, \n",
      "                  3\n",
      " lab0_LifetimeFitConsD_status = 0, \n",
      "                  0\n",
      " lab0_MassFitConsD_nPV = 1\n",
      " lab0_MassFitConsD_M = 5391.94\n",
      " lab0_MassFitConsD_MERR = 12.7341\n",
      " lab0_MassFitConsD_P = 88523.7\n",
      " lab0_MassFitConsD_PERR = 241.702\n",
      " lab0_MassFitConsD_chi2 = 1.22171\n",
      " lab0_MassFitConsD_nDOF = 5\n",
      " lab0_MassFitConsD_nIter = 2\n",
      " lab0_MassFitConsD_status = 0\n",
      " lab0_TAU        = 0.00300691\n",
      " lab0_TAUERR     = 2.0357e-05\n",
      " lab0_L0Global_Dec = 1\n",
      " lab0_L0Global_TIS = 1\n",
      " lab0_L0Global_TOS = 1\n",
      " lab0_Hlt1Global_Dec = 1\n",
      " lab0_Hlt1Global_TIS = 1\n",
      " lab0_Hlt1Global_TOS = 1\n",
      " lab0_Hlt1Phys_Dec = 1\n",
      " lab0_Hlt1Phys_TIS = 1\n",
      " lab0_Hlt1Phys_TOS = 1\n",
      " lab0_Hlt2Global_Dec = 1\n",
      " lab0_Hlt2Global_TIS = 1\n",
      " lab0_Hlt2Global_TOS = 1\n",
      " lab0_Hlt2Phys_Dec = 1\n",
      " lab0_Hlt2Phys_TIS = 1\n",
      " lab0_Hlt2Phys_TOS = 1\n",
      " lab0_L0HadronDecision_Dec = 1\n",
      " lab0_L0HadronDecision_TIS = 1\n",
      " lab0_L0HadronDecision_TOS = 1\n",
      " lab0_Hlt1TrackMVADecision_Dec = 1\n",
      " lab0_Hlt1TrackMVADecision_TIS = 0\n",
      " lab0_Hlt1TrackMVADecision_TOS = 1\n",
      " lab0_Hlt1TwoTrackMVADecision_Dec = 1\n",
      " lab0_Hlt1TwoTrackMVADecision_TIS = 0\n",
      " lab0_Hlt1TwoTrackMVADecision_TOS = 1\n",
      " lab0_Hlt2Topo2BodyDecision_Dec = 1\n",
      " lab0_Hlt2Topo2BodyDecision_TIS = 0\n",
      " lab0_Hlt2Topo2BodyDecision_TOS = 1\n",
      " lab0_Hlt2Topo3BodyDecision_Dec = 1\n",
      " lab0_Hlt2Topo3BodyDecision_TIS = 0\n",
      " lab0_Hlt2Topo3BodyDecision_TOS = 1\n",
      " lab0_Hlt2Topo4BodyDecision_Dec = 0\n",
      " lab0_Hlt2Topo4BodyDecision_TIS = 0\n",
      " lab0_Hlt2Topo4BodyDecision_TOS = 0\n",
      " lab0_Hlt2PhiIncPhiDecision_Dec = 0\n",
      " lab0_Hlt2PhiIncPhiDecision_TIS = 0\n",
      " lab0_Hlt2PhiIncPhiDecision_TOS = 0\n",
      " lab0_BsTaggingTool_OSCharm_TAGDEC = 0\n",
      " lab0_BsTaggingTool_OSCharm_TAGETA = 0.5\n",
      " lab0_BsTaggingTool_OSElectronLatest_TAGDEC = 0\n",
      " lab0_BsTaggingTool_OSElectronLatest_TAGETA = 0.5\n",
      " lab0_BsTaggingTool_OSKaonLatest_TAGDEC = 0\n",
      " lab0_BsTaggingTool_OSKaonLatest_TAGETA = 0.5\n",
      " lab0_BsTaggingTool_OSMuonLatest_TAGDEC = 0\n",
      " lab0_BsTaggingTool_OSMuonLatest_TAGETA = 0.5\n",
      " lab0_BsTaggingTool_OSVtxCh_TAGDEC = 0\n",
      " lab0_BsTaggingTool_OSVtxCh_TAGETA = 0.5\n",
      " lab0_BsTaggingTool_SSKaonLatest_TAGDEC = 1\n",
      " lab0_BsTaggingTool_SSKaonLatest_TAGETA = 0.16739\n",
      " lab0_BsTaggingTool_SSPion_TAGDEC = -1\n",
      " lab0_BsTaggingTool_SSPion_TAGETA = 0.458634\n",
      " lab0_BsTaggingTool_SSProton_TAGDEC = -1\n",
      " lab0_BsTaggingTool_SSProton_TAGETA = 0.29608\n",
      " lab1_CosTheta   = 0.0510488\n",
      " lab1_IPCHI2_OWNPV = 2324.52\n",
      " lab1_P          = 40731.1\n",
      " lab1_PT         = 5095.18\n",
      " lab1_PE         = 40734.1\n",
      " lab1_PX         = 4982.01\n",
      " lab1_PY         = -1067.89\n",
      " lab1_PZ         = 40411.2\n",
      " lab1_M          = 493.677\n",
      " lab1_TRUEID     = -211\n",
      " lab1_TRUEP_E    = 41068.3\n",
      " lab1_TRUEP_X    = 5025.67\n",
      " lab1_TRUEP_Y    = -1071.39\n",
      " lab1_TRUEP_Z    = 40745.3\n",
      " lab1_TRUEPT     = 5138.6\n",
      " lab1_TRUEORIGINVERTEX_X = 3.3079\n",
      " lab1_TRUEORIGINVERTEX_Y = -1.0677\n",
      " lab1_TRUEORIGINVERTEX_Z = 28.5689\n",
      " lab1_TRUEENDVERTEX_X = 0\n",
      " lab1_TRUEENDVERTEX_Y = 0\n",
      " lab1_TRUEENDVERTEX_Z = 0\n",
      " lab1_TRUEISSTABLE = 1\n",
      " lab1_TRUETAU    = -1\n",
      " lab1_ID         = -321\n",
      " lab1_PIDe       = -6.72595\n",
      " lab1_PIDmu      = -3.08508\n",
      " lab1_PIDK       = -23.876\n",
      " lab1_PIDp       = -56.0964\n",
      " lab1_ProbNNe    = 0.000130631\n",
      " lab1_ProbNNk    = 0.000607545\n",
      " lab1_ProbNNp    = 3.37691e-05\n",
      " lab1_ProbNNpi   = 0.953425\n",
      " lab1_ProbNNmu   = -1000\n",
      " lab1_ProbNNghost = 0.00143029\n",
      " lab1_isMuon     = 0\n",
      " lab1_TRACK_CHI2NDOF = 1.0179\n",
      " lab1_TRACK_GhostProb = 0.00347752\n",
      " lab2_CosTheta   = -0.0509201\n",
      " lab2_ENDVERTEX_X = 5.6443\n",
      " lab2_ENDVERTEX_Y = -2.0109\n",
      " lab2_ENDVERTEX_Z = 39.5311\n",
      " lab2_ENDVERTEX_CHI2 = 1.14273\n",
      " lab2_ENDVERTEX_NDOF = 3\n",
      " lab2_OWNPV_X    = 0.8288\n",
      " lab2_OWNPV_Y    = -0.217\n",
      " lab2_OWNPV_Z    = 14.0167\n",
      " lab2_IP_OWNPV   = 0.72596\n",
      " lab2_IPCHI2_OWNPV = 1683.13\n",
      " lab2_FD_OWNPV   = 26.0268\n",
      " lab2_FDCHI2_OWNPV = 34465.8\n",
      " lab2_DIRA_OWNPV = 0.999611\n",
      " lab2_FD_ORIVX   = 11.2343\n",
      " lab2_FDCHI2_ORIVX = 5340.43\n",
      " lab2_DIRA_ORIVX = 1\n",
      " lab2_P          = 47908.7\n",
      " lab2_PT         = 10727.7\n",
      " lab2_PE         = 47949.1\n",
      " lab2_PX         = 9928.99\n",
      " lab2_PY         = -4061.98\n",
      " lab2_PZ         = 46692.2\n",
      " lab2_MM         = 1967.67\n",
      " lab2_MMERR      = 4.715\n",
      " lab2_BKGCAT     = 20\n",
      " lab2_TRUEID     = 431\n",
      " lab2_TRUEP_E    = 48015.8\n",
      " lab2_TRUEP_X    = 9944.91\n",
      " lab2_TRUEP_Y    = -4061.25\n",
      " lab2_TRUEP_Z    = 46757.3\n",
      " lab2_TRUEPT     = 10742.2\n",
      " lab2_TRUEORIGINVERTEX_X = 3.3079\n",
      " lab2_TRUEORIGINVERTEX_Y = -1.0677\n",
      " lab2_TRUEORIGINVERTEX_Z = 28.5689\n",
      " lab2_TRUEENDVERTEX_X = 5.6287\n",
      " lab2_TRUEENDVERTEX_Y = -2.0154\n",
      " lab2_TRUEENDVERTEX_Z = 39.4802\n",
      " lab2_TRUEISSTABLE = 0\n",
      " lab2_TRUETAU    = 0.00153214\n",
      " lab2_ID         = 411\n",
      " lab2_MINIP      = 0.72596\n",
      " lab2_MINIPCHI2  = 1683.13\n",
      " lab2_MINIPNEXTBEST = 19.2292\n",
      " lab2_MINIPCHI2NEXTBEST = 42612.8\n",
      " lab2_IP_ORIVX   = 0.00141761\n",
      " lab2_IPCHI2_ORIVX = 0.0156957\n",
      " lab2_TAU        = 0.00153917\n",
      " lab2_TAUERR     = 1.45139e-05\n",
      " lab3_CosTheta   = 0.860059\n",
      " lab3_IP_OWNPV   = 0.511064\n",
      " lab3_IPCHI2_OWNPV = 800.699\n",
      " lab3_P          = 34885.2\n",
      " lab3_PT         = 7555.03\n",
      " lab3_PE         = 34888.7\n",
      " lab3_PX         = 7074.93\n",
      " lab3_PY         = -2650.24\n",
      " lab3_PZ         = 34057.3\n",
      " lab3_M          = 493.677\n",
      " lab3_TRUEID     = 321\n",
      " lab3_TRUEP_E    = 34963.2\n",
      " lab3_TRUEP_X    = 7092.68\n",
      " lab3_TRUEP_Y    = -2651.14\n",
      " lab3_TRUEP_Z    = 34129.8\n",
      " lab3_TRUEPT     = 7571.96\n",
      " lab3_TRUEORIGINVERTEX_X = 5.6287\n",
      " lab3_TRUEORIGINVERTEX_Y = -2.0154\n",
      " lab3_TRUEORIGINVERTEX_Z = 39.4802\n",
      " lab3_TRUEENDVERTEX_X = 0\n",
      " lab3_TRUEENDVERTEX_Y = 0\n",
      " lab3_TRUEENDVERTEX_Z = 0\n",
      " lab3_TRUEISSTABLE = 1\n",
      " lab3_TRUETAU    = -1\n",
      " lab3_ID         = 321\n",
      " lab3_PIDe       = -7.33507\n",
      " lab3_PIDmu      = -4.838\n",
      " lab3_PIDK       = 29.2415\n",
      " lab3_PIDp       = -70.3725\n",
      " lab3_ProbNNe    = 1.3948e-05\n",
      " lab3_ProbNNk    = 0.987071\n",
      " lab3_ProbNNp    = 1.07088e-05\n",
      " lab3_ProbNNpi   = 0.260499\n",
      " lab3_ProbNNmu   = -1000\n",
      " lab3_ProbNNghost = 0.000687517\n",
      " lab3_isMuon     = 0\n",
      " lab3_TRACK_CHI2NDOF = 0.996883\n",
      " lab3_TRACK_GhostProb = 0.00597326\n",
      " lab4_CosTheta   = -0.78116\n",
      " lab4_IP_OWNPV   = 2.25347\n",
      " lab4_IPCHI2_OWNPV = 8204.42\n",
      " lab4_P          = 7552.7\n",
      " lab4_PT         = 2113.58\n",
      " lab4_PE         = 7568.82\n",
      " lab4_PX         = 1918.79\n",
      " lab4_PY         = -886.26\n",
      " lab4_PZ         = 7250.94\n",
      " lab4_M          = 493.677\n",
      " lab4_TRUEID     = -321\n",
      " lab4_TRUEP_E    = 7569.42\n",
      " lab4_TRUEP_X    = 1918.88\n",
      " lab4_TRUEP_Y    = -884.6\n",
      " lab4_TRUEP_Z    = 7251.74\n",
      " lab4_TRUEPT     = 2112.96\n",
      " lab4_TRUEORIGINVERTEX_X = 5.6287\n",
      " lab4_TRUEORIGINVERTEX_Y = -2.0154\n",
      " lab4_TRUEORIGINVERTEX_Z = 39.4802\n",
      " lab4_TRUEENDVERTEX_X = 0\n",
      " lab4_TRUEENDVERTEX_Y = 0\n",
      " lab4_TRUEENDVERTEX_Z = 0\n",
      " lab4_TRUEISSTABLE = 1\n",
      " lab4_TRUETAU    = -1\n",
      " lab4_ID         = -321\n",
      " lab4_PIDe       = 1.8096\n",
      " lab4_PIDmu      = 3.9639\n",
      " lab4_PIDK       = 43.8771\n",
      " lab4_PIDp       = 43.8771\n",
      " lab4_ProbNNe    = 2.17336e-05\n",
      " lab4_ProbNNk    = 0.920101\n",
      " lab4_ProbNNp    = 0.815892\n",
      " lab4_ProbNNpi   = 0.00095697\n",
      " lab4_ProbNNmu   = -1000\n",
      " lab4_ProbNNghost = 0.1499\n",
      " lab4_isMuon     = 0\n",
      " lab4_TRACK_CHI2NDOF = 1.15647\n",
      " lab4_TRACK_GhostProb = 0.0721577\n",
      " lab5_CosTheta   = -0.14954\n",
      " lab5_IP_OWNPV   = 0.792594\n",
      " lab5_IPCHI2_OWNPV = 867.43\n",
      " lab5_P          = 5491.35\n",
      " lab5_PT         = 1073.13\n",
      " lab5_PE         = 5493.12\n",
      " lab5_PX         = 935.18\n",
      " lab5_PY         = -526.35\n",
      " lab5_PZ         = 5385.47\n",
      " lab5_M          = 139.57\n",
      " lab5_TRUEID     = 211\n",
      " lab5_TRUEP_E    = 5483.18\n",
      " lab5_TRUEP_X    = 933.37\n",
      " lab5_TRUEP_Y    = -525.51\n",
      " lab5_TRUEP_Z    = 5375.73\n",
      " lab5_TRUEPT     = 1071.14\n",
      " lab5_TRUEORIGINVERTEX_X = 5.6287\n",
      " lab5_TRUEORIGINVERTEX_Y = -2.0154\n",
      " lab5_TRUEORIGINVERTEX_Z = 39.4802\n",
      " lab5_TRUEENDVERTEX_X = 0\n",
      " lab5_TRUEENDVERTEX_Y = 0\n",
      " lab5_TRUEENDVERTEX_Z = 0\n",
      " lab5_TRUEISSTABLE = 1\n",
      " lab5_TRUETAU    = -1\n",
      " lab5_ID         = 211\n",
      " lab5_PIDe       = -6.91685\n",
      " lab5_PIDmu      = -7\n",
      " lab5_PIDK       = -71.8351\n",
      " lab5_PIDp       = -71.8351\n",
      " lab5_ProbNNe    = 2.01996e-07\n",
      " lab5_ProbNNk    = 0.000262307\n",
      " lab5_ProbNNp    = 3.36345e-05\n",
      " lab5_ProbNNpi   = 0.989356\n",
      " lab5_ProbNNmu   = -1000\n",
      " lab5_ProbNNghost = 0.00730391\n",
      " lab5_isMuon     = 0\n",
      " lab5_TRACK_CHI2NDOF = 0.940445\n",
      " lab5_TRACK_GhostProb = 0.017666\n",
      " nCandidate      = 0\n",
      " totCandidates   = 6\n",
      " runNumber       = 6363075\n",
      " eventNumber     = 2044420\n",
      " BCType          = 3\n",
      " OdinTCK         = 0\n",
      " L0DUTCK         = 5647\n",
      " HLT1TCK         = 1362630159\n",
      " HLT2TCK         = 1631131151\n",
      " Polarity        = -1\n",
      " nPV             = 2\n",
      " PVX             = 0.8288, \n",
      "                  0.8552\n",
      " PVY             = -0.217, \n",
      "                  -0.1478\n",
      " PVZ             = 14.0167, \n",
      "                  -68.7061\n",
      " PVCHI2          = 13.1738, \n",
      "                  6.04603\n",
      " PVNDOF          = 39, \n",
      "                  9\n",
      " PVNTRACKS       = 21, \n",
      "                  6\n",
      " nPVs            = 2\n",
      " nTracks         = 71\n",
      " nLongTracks     = 26\n",
      " nDownstreamTracks = 8\n",
      " nUpstreamTracks = 4\n",
      " nVeloTracks     = 45\n",
      " nTTracks        = 18\n",
      " nBackTracks     = 3\n",
      " nVeloClusters   = 797\n",
      " nITClusters     = 406\n",
      " nTTClusters     = 691\n",
      " nOTClusters     = 4937\n",
      " nSPDHits        = 130\n",
      " lab0_TAGDECISION = 11169\n",
      " lab0_TAGOMEGA   = 4.99006e-322\n",
      " lab0_TAGDECISION_OS = -541675232\n",
      " lab0_TAGOMEGA_OS = 5.58294e-322\n",
      " lab0_TAGGER     = 11169\n",
      " lab0_OS_Muon_DEC = 0\n",
      " lab0_OS_Muon_PROB = 0.5\n",
      " lab0_OS_Electron_DEC = 0\n",
      " lab0_OS_Electron_PROB = 0.5\n",
      " lab0_OS_Kaon_DEC = 0\n",
      " lab0_OS_Kaon_PROB = 0.5\n",
      " lab0_SS_Kaon_DEC = 1\n",
      " lab0_SS_Kaon_PROB = 0.16739\n",
      " lab0_SS_Pion_DEC = -1\n",
      " lab0_SS_Pion_PROB = 0.458634\n",
      " lab0_VtxCharge_DEC = 0\n",
      " lab0_VtxCharge_PROB = 0.5\n",
      " lab0_SS_PionBDT_DEC = 0\n",
      " lab0_SS_PionBDT_PROB = 4.59481e-322\n",
      " lab0_OS_nnetKaon_DEC = 110\n",
      " lab0_OS_nnetKaon_PROB = 4.46468e-316\n",
      " lab0_SS_nnetKaon_DEC = 0\n",
      " lab0_SS_nnetKaon_PROB = 2.37024e-310\n",
      " lab0_SS_Proton_DEC = -1\n",
      " lab0_SS_Proton_PROB = 0.29608\n",
      " lab0_OS_Charm_DEC = 0\n",
      " lab0_OS_Charm_PROB = 0.5\n",
      " lab0_ETA        = 2.41032\n",
      " lab34_MM        = 1696.19\n",
      " lab45_MM        = 891.534\n",
      " lab35_MM        = 840.952\n",
      " lab2_MassHypo_KKPi_Lambda = 2178.82\n",
      " lab2_MassHypo_KKPi_Lambda_dM = 3321.34\n",
      " lab2_MassHypo_KKPi_D = 1887.8\n",
      " lab2_MassHypo_KPiPi_Lambda = 2178.88\n",
      " lab2_MassHypo_KPiPi_LambdaSup = 2178.82\n",
      " lab2_MassHypo_KPiPi_D = 1887.86\n",
      " lab0_MassHypo_LcPi_LambdaFav = 5494.92\n",
      " lab0_MassHypo_LcPi_LambdaSup = 5494.92\n",
      " lab0_MassHypo_DPi_DFav = 5291.96\n",
      " lab0_MassHypo_DPi_DSup = 5292.11\n",
      " BDTGResponse_3  = 0.994925\n"
     ]
    }
   ],
   "source": [
    "mctree.Show(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are all the different variables for each decay that we can plot, cut, or play around with. the ntuple is structured like a matrix; with all these variable names as rows, and the event index as columns, which we can loop over. Now, let's see what the mass of the Bs0 looks like. The variable is called 'lab0_MM'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nbins = 200\n",
    "massrange = [5200,5500]\n",
    "masshist = ROOT.TH1F(\"masshist\",\"Histogram of Bs mass\",nbins,massrange[0],massrange[1])\n",
    "\n",
    "#for event in mctree :\n",
    "#  mass = event.lab0_MM\n",
    "#  masshist.Fill( mass )\n",
    "\n",
    "c1 = ROOT.TCanvas(\"c1\")\n",
    "masshist.Draw()\n",
    "masshist.GetXaxis().SetTitle(\"M(B_{s}^{0}) [MeV/c^{2}]\")\n",
    "masshist.GetYaxis().SetTitle(\"Number of events\")\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OK, that doesn't look like a very nice peak, does it? In fact, with Pythia, the mass of the Bs0 looked like a very nice delta function. (Actually, there is a theoretical 'width' associated to the Bs, which you can estimate with &Delta;E &Delta;t &ge; &#8463;/2, or more accurately with a Breit-Wigner shape, but it's almost a delta). What is going on here? <br/><br/>\n",
    "First of all, we are looking at the result of the simulated particles travelling through the detector, creating signals, and reconstructing the event. This means we are now dealing with experimental resolution effects: the width you see is basically caused by the (simulated) momentum resolution of LHCb. <br/>\n",
    "<br/>\n",
    "Secondly, even though we explicitly simulate Bs --> Ds pi decays in every event, there is a chance of misreconstruction (or even missing the whole Bs decay - we are not 100% efficient!). In order to get a clean sample of well reconstructed Bs --> Ds pi decays, we must demand that the particle types are the ones we expect, otherwise we include a misidentification background. Typically, if we then try to calculate the Bs invariant mass, its peak is shifted, since we got the mass of the Kaon / pion wrong. This is the cause of the second 'bump' we see. <br/> \n",
    "On top of that, it could be that we do make a combination of (Ds) and (pi), but that the pion did not originate from the Bs at all (i.e. combinatorial background). <br/>\n",
    "<br/>\n",
    "Fortunately, this is all in simulation, and we can ensure all of the above since we know what we put in. We will check if all particles in our decay were created with Pythia with the right PID codes. Also, we will make sure that the 'mothers of all the particles are correct', with a variable known as the 'background category'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "IDcuts = \"abs(lab1_ID)==211 && abs(lab3_ID)==321 && abs(lab4_ID)==321 && abs(lab5_ID)==211\"\n",
    "BGcuts = \"(lab2_BKGCAT < 30 || lab2_BKGCAT == 50)&&(lab0_BKGCAT < 30 || lab0_BKGCAT == 50)\"\n",
    "MCcuts = IDcuts + \" && \" + BGcuts\n",
    "IDcuts = \"abs(pplus1_ID)==211 && abs(kminus_ID)==321 && abs(pplus1_ID)==2212 && abs(lcplus_ID)==4122\"\n",
    "BGcuts = \"(lcplus_BKGCAT < 30 || lcplus_BKGCAT == 50)\"\n",
    "MCcuts = IDcuts + \"&&\" + BGcuts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we will draw the mass histogram again. However, you might have noticed that looping over all the events can take quite some time! (In c++ it would be faster than python, but still). Fortunately, there is a highly optimized C++ algorithm we can call that does the work for us called TTree::Draw(\"variableName\"). We will then have to get the histogram from the memory to work with it.<br/>\n",
    "<br/>\n",
    "For comparison, we will draw the 'uncut' and the 'cut' histograms on top of each other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# use TTree::Draw(\"variableName>>histogramName(nbins, lower limit, upper limit)\", \"cuts that you want to apply\")\n",
    "mctree.Draw(\"lab0_MM>>masshist(\" + str(nbins) + \",\" + str(massrange[0]) + \",\" + str(massrange[1]) + \")\", MCcuts)\n",
    "masshist = ROOT.gDirectory.Get(\"masshist\")\n",
    "\n",
    "# Remove the top-right statbox, since it is only confusing if there are two histograms.\n",
    "# Also remove the ugly title on top\n",
    "masshist.SetTitle(\"\")\n",
    "masshist2.SetTitle(\"\")\n",
    "ROOT.gStyle.SetOptStat(0)\n",
    "\n",
    "# Give the lines a different color. For more options, see https://root.cern.ch/doc/master/classTAttLine.html\n",
    "\n",
    "masshist.SetLineWidth(3)\n",
    "masshist.SetLineColor(4) # blue\n",
    "masshist.Draw()\n",
    "\n",
    "#If you want to have more histograms on the same canvas, you could do something like the following\n",
    "masshist2.SetLineWidth(3)\n",
    "masshist2.SetLineColor(2) # red\n",
    "masshist2.Draw(\"same\")\n",
    "\n",
    "\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TFile::Append>: Replacing existing TH1: masshist1 (Potential memory leak).\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "################\n",
    "# Exercise 1: \n",
    "#  - Plot the mass of the Ds. Set the appropriate range.\n",
    "#  - Plot the lifetime of the Bs ('lab0_TAU')\n",
    "################\n",
    "################\n",
    "# Exercise 1: \n",
    "#  - Plot the mass of the Ds. Set the appropriate range.\n",
    "#  - Plot the lifetime of the Bs ('lab0_TAU')\n",
    "################\n",
    "\n",
    "\n",
    "nbins = 200\n",
    "massrange = [1900,2050]\n",
    "masshist1 = ROOT.TH1F(\"masshist1\",\"Histogram of Ds mass\",nbins,massrange[0],massrange[1])\n",
    "\n",
    "#for event in mctree :\n",
    " # mass = event.lab2_MM\n",
    "  #masshist1.Fill( mass )\n",
    "    \n",
    "c2 = ROOT.TCanvas(\"c2\")\n",
    "mctree.Draw(\"lab2_MM>>masshist1(\" + str(nbins) + \",\" + str(massrange[0]) + \",\" + str(massrange[1]) + \")\", MCcuts)\n",
    "masshist1 = ROOT.gDirectory.Get(\"masshist1\")\n",
    "ROOT.gStyle.SetOptStat(1111111)\n",
    "masshist1.Draw()\n",
    "masshist1.SetTitle(\"\")\n",
    "masshist1.GetXaxis().SetTitle(\"M(D_{s}^{0}) [MeV/c^{2}]\")\n",
    "masshist1.GetYaxis().SetTitle(\"Number of events\")\n",
    "c2.Update()\n",
    "c2.Draw()\n",
    "\n",
    "n_bins = 300\n",
    "Lifetimerange = [0.0,0.01]\n",
    "Lifetimehist = ROOT.TH1F(\"Lifetimehist\",\"Histogram of Bs lifetime\",n_bins,Lifetimerange[0],Lifetimerange[1])\n",
    "\n",
    "#for event in mctree :\n",
    " # Lifetime = event.lab0_TAU\n",
    "  #Lifetimehist.Fill( Lifetime )\n",
    "c3 = ROOT.TCanvas(\"c3\")\n",
    "mctree.Draw(\"lab0_TAU>>Lifetimehist(\" + str(n_bins) + \",\" + str(Lifetimerange[0]) + \",\" + str(Lifetimerange[1]) + \")\", MCcuts)\n",
    "Lifetimehist = ROOT.gDirectory.Get(\"Lifetimehist\")\n",
    "ROOT.gStyle.SetOptStat(1111111)    \n",
    "Lifetimehist.Draw()\n",
    "Lifetimehist.SetTitle(\"\")\n",
    "Lifetimehist.GetXaxis().SetTitle(\"Lifetime(B_{s}^{0}) [ns]\")\n",
    "Lifetimehist.GetYaxis().SetTitle(\"Number of events\")\n",
    "c3.Update()\n",
    "c3.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Does the lifetime distribution look like a nice exponential? Can you try to explain what you observe? <br/>\n",
    "This strange shape for low lifetimes is caused by background-reducing selection criteria on the data, which reduces the contribution from candidates that not really originated from a Bs decay, but are in fact combinations of particles that are directly produced in the proton-proton collision (Primary Vertex, or PV). This background is (obviously) expected to have a short 'decay length' (= distance from PV to the decay vertex of the Bs) and thus a short 'lifetime' <br/>\n",
    "The effect is that this has on the observed lifetime distribution of the Bs, is called the 'lifetime acceptance' of the LHCb detector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean value of the Pythia generated lifetime is: \n",
      "0.002112587352634015\n",
      "Mean value of the measured lifetime is: \n",
      "0.002111050386011967\n",
      "RMS value of the Pythia generated lifetime is: \n",
      "0.0015290970176539591\n",
      "RMS value of the measured lifetime is: \n",
      "0.0015299143920160753\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "################\n",
    "# Exercise 2: \n",
    "#  Find the lifetime resolution for Bs mesons of the LHCb detector.\n",
    "#  Tip: plot the difference between the measured lifetime and the Pythia generated lifetime.\n",
    "#   How to obtain the 'mean' or 'width' (or 'Root Mean Square' (RMS)) of a TH1F histogram, \n",
    "#   you can find in the documentation (or google)\n",
    "################\n",
    "# plot the difference between the tau and the true tau\n",
    "#Datalocation = \"/Users/simoncalo/Data_B2DX_2016_Down_Bs2DsPi_KKPi.root\" # Real data\n",
    "\n",
    "datafile = ROOT.TFile(Datalocation, \"READONLY\")\n",
    "datatree = datafile.Get(\"DecayTree\")\n",
    "datatree.SetName(\"Datatree\")\n",
    "ROOT.gStyle.SetOptStat()\n",
    "\n",
    "mctree.Draw(\"lab0_TAU>>Lifetimehist(\" + str(n_bins) + \",\" + str(Lifetimerange[0]) + \",\" + str(Lifetimerange[1]) + \")\", MCcuts)\n",
    "Lifetimehist = ROOT.gDirectory.Get(\"Lifetimehist\")\n",
    "\n",
    "\n",
    "mctree.Draw(\"lab0_TRUETAU>>Lifetimehist2(\" + str(nbins) + \",\" + str(Lifetimerange[0]) + \",\" + str(Lifetimerange[1]) + \")\", MCcuts)\n",
    "Lifetimehist2 = ROOT.gDirectory.Get(\"Lifetimehist2\") # True lifetime histogram\n",
    "\n",
    "mctree.Draw(\"lab0_TRUETAU - lab0_TAU>>Lifetimehistdif(\" + str(n_bins) + \",\" + str(Lifetimerange[0]) + \",\" + str(Lifetimerange[1]) + \")\")\n",
    "Lifetimehistdif = ROOT.gDirectory.Get(\"Lifetimehistdif\") #difference histogram\n",
    "\n",
    "ROOT.gStyle.SetOptStat()\n",
    "\n",
    "c3.cd()\n",
    "Lifetimehist.Draw()\n",
    "ROOT.gStyle.SetOptStat()\n",
    "Lifetimehist.SetTitle(\"\")\n",
    "Lifetimehist.SetMaximum(2700)\n",
    "Lifetimehist.GetXaxis().SetTitle(\"Lifetime(B_{s}^{0}) [ns]\")\n",
    "Lifetimehist.GetYaxis().SetTitle(\"Number of events\")\n",
    "c3.Update()\n",
    "c3.Draw()\n",
    "ROOT.gStyle.SetOptStat()\n",
    "Lifetimehist2.SetMaximum(2700)\n",
    "Lifetimehist2.SetLineWidth(1)\n",
    "Lifetimehist2.SetLineColor(2) # red\n",
    "Lifetimehist2.Draw(\"same\")\n",
    "c3.Update()\n",
    "c3.Draw()\n",
    "Lifetimehistdif.SetMaximum(2700)\n",
    "Lifetimehistdif.SetLineStyle(2)\n",
    "Lifetimehistdif.SetLineWidth(3)\n",
    "Lifetimehistdif.SetLineColor(3)        \n",
    "Lifetimehistdif.Draw(\"same\")\n",
    "c3.Update()\n",
    "c3.Draw()\n",
    "print(\"Mean value of the Pythia generated lifetime is: \")\n",
    "print(Lifetimehist.GetMean())\n",
    "print(\"Mean value of the measured lifetime is: \")\n",
    "print(Lifetimehist2.GetMean())\n",
    "print(\"RMS value of the Pythia generated lifetime is: \")\n",
    "print(Lifetimehist.GetRMS())\n",
    "print(\"RMS value of the measured lifetime is: \")\n",
    "print(Lifetimehist2.GetRMS())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: cdif\n",
      "Warning in <TFile::Append>: Replacing existing TH1: Lifetimehistdiff (Potential memory leak).\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ROOT.gStyle.SetOptStat()\n",
    "\n",
    "cdif = ROOT.TCanvas(\"cdif\")\n",
    "ROOT.gStyle.SetOptStat()\n",
    "mctree.Draw(\"(lab0_TRUETAU - lab0_TAU)>>Lifetimehistdif(\" + str(n_bins) + \",\" + str(Lifetimerange[0]) + \",\" + str(Lifetimerange[1]) + \")\")\n",
    "Lifetimehistdif = ROOT.gDirectory.Get(\"Lifetimehistdif\")\n",
    "n_bins = 300\n",
    "Lifetimerange = [0.0,0.01]\n",
    "Lifetimehistdiff = ROOT.TH1F(\"Lifetimehistdiff\",\"Histogram of Difference of Bs lifetime from TRUE value\",n_bins,Lifetimerange[0],Lifetimerange[1])\n",
    "\n",
    "#for event in mctree :\n",
    " #   difference = event.lab0_TAU - event.lab0_TAU\n",
    "  #  Lifetimehistdiff.Fill( difference )\n",
    "    \n",
    "#cdif = ROOT.TCanvas(\"cdif\")   \n",
    "Lifetimehistdiff.Draw(\"same\")\n",
    "Lifetimehistdiff.GetXaxis().SetTitle(\"Lifetime(B_{s}^{0}) [ns]\")\n",
    "Lifetimehistdiff.GetYaxis().SetTitle(\"Number of events\")\n",
    "ROOT.gStyle.SetOptStat()\n",
    "#c3.Clear()\n",
    "#c3.Update()\n",
    "#c3.Draw()\n",
    "#cdif.SetLogy()\n",
    "cdif.Update()\n",
    "cdif.Draw()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Fitting a curve </h1>\n",
    "Now, often our goal is to obtain the number of events, N. In the simulated scenario above, there is almost no background visible (i.e. it looks like a clean peak). In that case, we could simply count the bin contents of the histogram, and sum them up. However, in real life things will be more complicated, and there will be various background components in our invariant mass plot. The easiest way to statistically disentangle the various contributions is to define a shape (Probability Density Function, or 'PDF') for all contributions, and do a regression (i.e. 'fit') of the combination of all shapes to the data. If you then integrate the signal shape only, you will get the signal yield. <br/>\n",
    "<br/>\n",
    "The first guess of our signal shape would be a simple gaussian function. In order to obtain the right values for the normalisation, the mean and the width (sigma), we will do a fit to the data. In order to do this, we need to define a metric for how 'good' or 'bad' the signal shape matches the data points. <br/>\n",
    "One example is the chi2: this is basically the  difference between the y-values of the signal shape and the data, squared, summed up for each bin. However, every measurement has an uncertainty associated to it&#x2731;. Since we are dealing with random events in time with a known rate (the 'lifetime' if you will), we use a Poissonian distribution. Basically this means that the error in the bin height, is the square-root of the bin height. In the chi2, you can take the error into account by dividing the difference in y by the error of that bin, in the sum.<br/>\n",
    "<br/>\n",
    "The next step is to minimize this chi2. We can just scan the parameter space randomly (changing the normalisation, mean, and width) and re-evaluate the chi2, and at the end, pick the point with the lowest chi2. However, this does not promise us any linear improvement and takes a long time. \n",
    "Instead, we could take the gradient of the chi2 as function of the parameters, and take a step in parameter space into the direction of the gradient. We know that the gradient always points perpendicular to the line of constant values, so this will always be a step towards a minimum. (Think of mountains and lines of equal height: the gradient always points perpendicular to that, i.e. directly down the slope). This approach is called 'gradient descent'. <br/>\n",
    "<br/>\n",
    "\n",
    "Another method, which is the default method in modern applications, uses something called a Likelihood. This is basically a function of the parameters (normalisation, mean, sigma) that tells you how likely your parameters are correct, given the data. For a more detailed description, see for instance <a href=\"http://www.physics.utah.edu/~detar/phys6720/handouts/curve_fit/curve_fit/node2.html\">this webpage</a>. We can then find the parameters which maximize the likelihood, using for instance gradient descent. The benefit of using a likelihood function is that we can easily obtain the estimated errors on our values for the parameters as well, by seeing how 'quickly' the likelihood increases if we change our parameters. <br/>\n",
    "<br/>\n",
    "Although it is important to understand the above, obviously, it has been implemented in ROOT and just a function call away. We just call 'fit' and it does the magic for us (calling a neat little program called MINUIT in the background).\n",
    "<br/>\n",
    "<br/>\n",
    "\n",
    "\n",
    "<br/>\n",
    "&#x2731;<i>There are actually two schools of interpretation: one is that since it is a random process in nature, our observation has an error since the process itself has an inherent spread. The other is that nature is what it is - our observation is fixed. It is our model, or interpretation, that has an error with respect to our observation. These are called Frequentist vs Bayesian interpretations, which is a constant battlefield, and beyond the scope of this course. </i>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define a PDF. Our first guess is a Gaussian.\n",
    "myGauss = ROOT.TF1(\"myGauss\",\"gaus(0)\",massrange[0], massrange[1])\n",
    "# Set the starting values. In fact, it is quite important that these are reasonable, \n",
    "#  otherwise the fit can get stuck in a 'local minimum', or not converge at all!\n",
    "normalise_guess = mctree.GetEntries() / nbins * 3\n",
    "mean_guess = 5370.\n",
    "width_guess = 20.\n",
    "myGauss.SetParameters( normalise_guess, mean_guess, width_guess )\n",
    "\n",
    "\n",
    "# Draw the histogram, but do display the errors on every point.\n",
    "#  For more drawing options, see https://root.cern/doc/v610/classTHistPainter.html\n",
    "c1.Clear()\n",
    "masshist2.SetLineWidth(1)\n",
    "masshist2.Draw(\"E\")\n",
    "myGauss.SetLineWidth(2)\n",
    "myGauss.SetLineColor(7) # cyan\n",
    "myGauss.Draw(\"same\")\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apprarently our initial guess is not too bad. Let's fit it for real now, and see what the value and error of the yield is.\n",
    "Also, let's check the goodness of fit. For this, we use the chi2. However, as the chi2 contains a sum over all the bins, the value will simply increase with the number of bins. We therefore divide by the 'number of degrees of freedom', which is basically the number of bins minus the number of parameters in our fit. <br/>\n",
    "For a perfect fit, this number should be equal to one. (This means that on average, data points lie around the PDF with a spread of about one gaussian sigma)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "197\n",
      "N(Bs0) = 182864 +- 524\n",
      "chi2/ndf = 38.87517926132617\n",
      "\n",
      " FCN=7658.41 FROM MIGRAD    STATUS=CONVERGED      93 CALLS          94 TOTAL\n",
      "                     EDM=7.61702e-08    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  Constant     3.95319e+03   1.57444e+01   4.83832e-01   1.34786e-05\n",
      "   2  Mean         5.36767e+03   5.32420e-02   2.55950e-03   6.73366e-03\n",
      "   3  Sigma        1.84540e+01   5.10568e-02   2.27479e-05   1.90661e-01\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the shape to the data\n",
    "masshist2.Fit(\"myGauss\")\n",
    "c1.Update()\n",
    "c1.Draw()\n",
    "\n",
    "# Obtain the yield and the chi2/ndf\n",
    "signal_yield = myGauss.Integral(massrange[0],massrange[1])\n",
    "signal_error = myGauss.IntegralError(massrange[0], massrange[1])\n",
    "chi2ndf = myGauss.GetChisquare() / myGauss.GetNDF()\n",
    "print(myGauss.GetNDF())\n",
    "print(\"N(Bs0) = %.0f +- %.0f\"%(signal_yield,signal_error))\n",
    "print(\"chi2/ndf = \" + str(chi2ndf))\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, the fit is not perfect. This is visible by eye, but also from the chi2/ndf, which is about 40. What can we do? It seems that the data is not completely gaussian after all: there seem to be some large (non-gaussian) tails. Even the tail on the left is somewhat larger than the one on the right! Actually, why did we expect it to be gaussian anyway? <br/>\n",
    "<i>The answer is the central-limit theorem: if there are many contributing sources of error, which independently might not be gaussian distributed, then the total error will approximate a gaussian distribution.</i> <br/>\n",
    "The tails can be are explained with two reasons:<br/>\n",
    "- When particles travel through material, they lose energy. This energy we do not reconstruct, so some particles actually have lower energy than what they were created with. This energy we miss, and therefore the mass is shifted somewhat to the left <br/>\n",
    "- When particles get a higher momentum (resulting in a larger invariant Bs mass), they become less curved in the magnetic field. Hence, it is harder to actually determine their momentum, and thus the error gets larger. This causes the higher-Bs-invariant-mass part to have a larger smearing than the rest.<br/>\n",
    "<br/>\n",
    "Great that we can explain what we see, but what can we do about it? For one, we could try to fit only the Gaussian-like core, and say that there is very little particles in the tails. This we can do by changing the fit range in the definition of our function TF1::TF1(\"name\",\"gaus(0)\",lower,upper), and by adding parameters to the fit method, TH1F::Fit(\"shape\",\"\",\"\",lower,upper)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64\n",
      "N(Bs0) = 180937 +- 521\n",
      "chi2/ndf = 18.652035979816883\n",
      "\n",
      " FCN=1193.73 FROM MIGRAD    STATUS=CONVERGED      65 CALLS          66 TOTAL\n",
      "                     EDM=5.84546e-08    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  Constant     4.06730e+03   1.55808e+01   1.97630e-01   1.66156e-05\n",
      "   2  Mean         5.36783e+03   5.27624e-02   2.55958e-03   3.76777e-03\n",
      "   3  Sigma        1.78437e+01   4.72241e-02   1.12117e-05   4.38830e-01\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "###############\n",
    "# Exercise 3\n",
    "#  Fit a gaussian to the data, using a range that is restricted to the gaussian 'core' of the data.\n",
    "#  Does the fit quality improve? Does the observed yield change much? Do you expect that?\n",
    "###############\n",
    "# Define a PDF. Our first guess is a Gaussian.\n",
    "myGauss1 = ROOT.TF1(\"myGauss1\",\"gaus(0)\", 5320, 5420)\n",
    "# Set the starting values. In fact, it is quite important that these are reasonable, \n",
    "#  otherwise the fit can get stuck in a 'local minimum', or not converge at all!\n",
    "normalise_guess = mctree.GetEntries() / nbins * 3\n",
    "mean_guess = 5370.\n",
    "width_guess = 20.\n",
    "myGauss1.SetParameters( normalise_guess, mean_guess, width_guess )\n",
    "# Draw the histogram, but do display the errors on every point.\n",
    "#  For more drawing options, see https://root.cern/doc/v610/classTHistPainter.html\n",
    "c1.Clear()\n",
    "masshist2.SetLineWidth(1)\n",
    "masshist2.Draw(\"E\")\n",
    "myGauss1.SetLineWidth(2)\n",
    "myGauss1.SetLineColor(7) # cyan\n",
    "myGauss1.Draw(\"same\")\n",
    "c1.Update()\n",
    "c1.Draw()\n",
    "\n",
    "# Fit the shape to the data\n",
    "masshist2.Fit(\"myGauss1\", \"\", \"\", 5320, 5420)\n",
    "c1.Update()\n",
    "c1.Draw()\n",
    "\n",
    "# Obtain the yield and the chi2/ndf\n",
    "signal_yield1 = myGauss1.Integral(5320, 5420)\n",
    "signal_error1 = myGauss1.IntegralError(5320, 5420)\n",
    "chi2ndf1 = myGauss1.GetChisquare() / myGauss1.GetNDF()\n",
    "print(myGauss1.GetNDF())\n",
    "print(\"N(Bs0) = %.0f +- %.0f\"%(signal_yield1,signal_error1))\n",
    "print(\"chi2/ndf = \" + str(chi2ndf1))\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obviously, the above is also quite unsatisfactory. It turns out that not even the core is fully Gaussian. This we can explain by the fact that LHCb actually has two 'particle tracking' stations: the Inner Tracker and the Outer Tracker. The outer tracker consists of straw tubes filled with gas, which have a hit resolution of about 200 micrometer. The Inner Tracker is made out of silicon strips, which have a resolution of about 50 micrometer. So, perhaps we should fit using the sum of two gaussians, each with their own 'resolution'. Building up PDFs from multiple shapes can become quite complex very fast, so for this we will use a specific framework called RooFit. And while we're at it, we might as well add a shape for the tails as well.<br/>\n",
    "<br/>\n",
    "We will use a Gaussian with an exponential tail on the left, called a Crystal Ball (CB) function, and add another gaussian on top, with the same mean as the CB, but with a different width."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\u001b[1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby\u001b[0m \n",
      "                Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University\n",
      "                All rights reserved, please read http://roofit.sourceforge.net/license.txt\n",
      "\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(masshist2_RooFit): fit range of variable mass expanded to nearest bin boundaries: [5200,5500] --> [5200,5500]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the 'independent' variable, or x-axis\n",
    "mass        = ROOT.RooRealVar(\"mass\",\"Mass\",massrange[0],massrange[1],\"MeV/c^{2}\")\n",
    "\n",
    "# Build the variables for the Gaussian\n",
    "#  Syntax is RooRealVar(\"name\",\"title\",initial_value,minrange,maxrange)\n",
    "gauss_mean  = ROOT.RooRealVar(\"gauss_mean\",\"Mean\",5370,5340,5390)\n",
    "gauss_width = ROOT.RooRealVar(\"gauss_width\",\"Width\",10,6,30)\n",
    "myGauss     = ROOT.RooGaussian(\"myGauss\",\"Gaussian\", mass, gauss_mean, gauss_width)\n",
    "\n",
    "# Build the variables for the Crystal Ball\n",
    "cb_width    = ROOT.RooRealVar(\"cb_width\",\"CB Width\",17,8,50)\n",
    "cb_alpha    = ROOT.RooRealVar(\"cb_alpha\",\"Exp.const\",1.0,0.0,5.0)\n",
    "cb_n        = ROOT.RooRealVar(\"cb_n\",\"Exp.crossover\",1.0,0.0,15.0)\n",
    "# these are all the parameters required by a crystal ball shape\n",
    "myCB        = ROOT.RooCBShape(\"myCB\",\"Crystal Ball\", mass, gauss_mean, cb_width, cb_alpha, cb_n)\n",
    "\n",
    "# Define the normalisation constants for both shapes, and add them together\n",
    "gauss_Norm  = ROOT.RooRealVar(\"gauss_Norm\",\"Gauss Yield\", mctree.GetEntries()/nbins * 3, 0, mctree.GetEntries() * 2)\n",
    "cb_Norm     = ROOT.RooRealVar(\"cb_Norm\",\"CB Yield\", mctree.GetEntries()/nbins * 3, 0, mctree.GetEntries() * 2)\n",
    "signalshape = ROOT.RooAddPdf(\"signalshape\",\"Signal shape\", ROOT.RooArgList(myGauss,myCB), ROOT.RooArgList(gauss_Norm, cb_Norm) )\n",
    "\n",
    "# Transform the histogram into something RooFit can deal with\n",
    "masshist2_RooFit = ROOT.RooDataHist(\"masshist2_RooFit\",\"masshist2 RooFit\", ROOT.RooArgList(mass), masshist2)\n",
    "\n",
    "# plot everything on a frame, then plot the frame on the canvas.\n",
    "# First: without fitting, to see if our initial 'guesses' are OK\n",
    "frame = mass.frame()\n",
    "masshist2_RooFit.plotOn(frame)\n",
    "signalshape.plotOn(frame)\n",
    "frame.Draw()\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[#1] INFO:Minization -- p.d.f. provides expected number of events, including extended term in likelihood.\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions will be evaluated in cache-and-track mode: (myGauss,myCB)\n",
      " **********\n",
      " **    1 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **    2 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 cb_Norm      8.06400e+03  4.03200e+03    0.00000e+00  1.07557e+06\n",
      "     2 cb_alpha     1.00000e+00  5.00000e-01    0.00000e+00  5.00000e+00\n",
      "     3 cb_n         1.00000e+00  5.00000e-01    0.00000e+00  1.50000e+01\n",
      "     4 cb_width     1.70000e+01  4.20000e+00    8.00000e+00  5.00000e+01\n",
      "     5 gauss_Norm   8.06400e+03  4.03200e+03    0.00000e+00  1.07557e+06\n",
      "     6 gauss_mean   5.37000e+03  5.00000e+00    5.34000e+03  5.39000e+03\n",
      "     7 gauss_width   1.00000e+01  2.00000e+00    6.00000e+00  3.00000e+01\n",
      " **********\n",
      " **    3 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **    4 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **    5 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **    6 **MIGRAD        3500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-630977 FROM MIGRAD    STATUS=INITIATE       28 CALLS          29 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  cb_Norm      8.06400e+03   4.03200e+03   4.49824e-02  -6.90339e+05\n",
      "   2  cb_alpha     1.00000e+00   5.00000e-01   2.57889e-01  -1.99720e+04\n",
      "   3  cb_n         1.00000e+00   5.00000e-01   1.38147e-01  -2.81186e+04\n",
      "   4  cb_width     1.70000e+01   4.20000e+00   2.50268e-01  -5.03469e+04\n",
      "   5  gauss_Norm   8.06400e+03   4.03200e+03   4.49824e-02  -6.14855e+05\n",
      "   6  gauss_mean   5.37000e+03   5.00000e+00   2.05758e-01  -7.00573e+03\n",
      "   7  gauss_width   1.00000e+01   2.00000e+00   2.30756e-01  -1.72938e+04\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-805932 FROM MIGRAD    STATUS=CONVERGED     605 CALLS         606 TOTAL\n",
      "                     EDM=4.70596e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  cb_Norm      2.43548e+04   4.95172e+02   8.80236e-04  -3.45423e-01\n",
      "   2  cb_alpha     7.58639e-01   1.46505e-02   3.69952e-03   5.00853e-01\n",
      "   3  cb_n         1.50000e+01   1.55776e+00   3.90859e-01  -2.82951e-03\n",
      "   4  cb_width     4.03605e+01   4.17009e-01   9.91587e-03   2.34102e-01\n",
      "   5  gauss_Norm   1.05213e+05   5.70781e+02   6.71700e-04  -2.40296e-01\n",
      "   6  gauss_mean   5.36772e+03   5.49935e-02   1.34843e-03   9.84579e-01\n",
      "   7  gauss_width   1.60120e+01   6.82801e-02   2.44634e-03   2.50396e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  7    ERR DEF=0.5\n",
      "  2.452e+05  4.191e+00  1.444e-01 -1.404e+02 -2.207e+05  1.924e+00 -2.431e+01 \n",
      "  4.191e+00  2.146e-04  1.974e-05 -1.184e-03 -4.188e+00 -6.111e-05 -4.726e-04 \n",
      "  1.444e-01  1.974e-05  3.830e-05 -7.141e-05 -1.442e-01 -3.753e-06 -1.330e-05 \n",
      " -1.404e+02 -1.184e-03 -7.141e-05  1.739e-01  1.403e+02 -3.120e-03  1.336e-02 \n",
      " -2.207e+05 -4.188e+00 -1.442e-01  1.403e+02  3.258e+05 -1.923e+00  2.430e+01 \n",
      "  1.924e+00 -6.111e-05 -3.753e-06 -3.120e-03 -1.923e+00  3.024e-03 -2.744e-04 \n",
      " -2.431e+01 -4.726e-04 -1.330e-05  1.336e-02  2.430e+01 -2.744e-04  4.662e-03 \n",
      " PARAMETER  CORRELATION COEFFICIENTS  \n",
      "       NO.  GLOBAL      1      2      3      4      5      6      7\n",
      "        1  0.88852   1.000  0.578  0.047 -0.680 -0.781  0.071 -0.719\n",
      "        2  0.68288   0.578  1.000  0.218 -0.194 -0.501 -0.076 -0.472\n",
      "        3  0.25317   0.047  0.218  1.000 -0.028 -0.041 -0.011 -0.031\n",
      "        4  0.73611  -0.680 -0.194 -0.028  1.000  0.589 -0.136  0.469\n",
      "        5  0.79503  -0.781 -0.501 -0.041  0.589  1.000 -0.061  0.623\n",
      "        6  0.18382   0.071 -0.076 -0.011 -0.136 -0.061  1.000 -0.073\n",
      "        7  0.72949  -0.719 -0.472 -0.031  0.469  0.623 -0.073  1.000\n",
      " **********\n",
      " **    7 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **    8 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **    9 **HESSE        3500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-805932 FROM HESSE     STATUS=OK             54 CALLS         660 TOTAL\n",
      "                     EDM=4.70726e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  cb_Norm      2.43548e+04   5.03870e+02   3.52094e-05  -1.26869e+00\n",
      "   2  cb_alpha     7.58639e-01   1.49417e-02   1.47981e-04  -7.70570e-01\n",
      "   3  cb_n         1.50000e+01   1.52475e+00   5.00000e-01   1.56954e+00\n",
      "   4  cb_width     4.03605e+01   4.21756e-01   3.96635e-04   5.71595e-01\n",
      "   5  gauss_Norm   1.05213e+05   5.78561e+02   2.68680e-05  -9.34596e-01\n",
      "   6  gauss_mean   5.36772e+03   5.50118e-02   2.69685e-04   1.09104e-01\n",
      "   7  gauss_width   1.60120e+01   6.90921e-02   9.78536e-05  -1.66437e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  7    ERR DEF=0.5\n",
      "  2.539e+05  4.399e+00  1.908e-01 -1.465e+02 -2.295e+05  2.032e+00 -2.530e+01 \n",
      "  4.399e+00  2.233e-04  2.490e-05 -1.336e-03 -4.399e+00 -5.959e-05 -4.953e-04 \n",
      "  1.908e-01  2.490e-05  3.745e-05 -1.025e-04 -1.908e-01 -4.394e-06 -1.761e-05 \n",
      " -1.465e+02 -1.336e-03 -1.025e-04  1.779e-01  1.465e+02 -3.199e-03  1.403e-02 \n",
      " -2.295e+05 -4.399e+00 -1.908e-01  1.465e+02  3.347e+05 -2.032e+00  2.530e+01 \n",
      "  2.032e+00 -5.959e-05 -4.394e-06 -3.199e-03 -2.032e+00  3.026e-03 -2.888e-04 \n",
      " -2.530e+01 -4.953e-04 -1.761e-05  1.403e-02  2.530e+01 -2.888e-04  4.774e-03 \n",
      " PARAMETER  CORRELATION COEFFICIENTS  \n",
      "       NO.  GLOBAL      1      2      3      4      5      6      7\n",
      "        1  0.89257   1.000  0.584  0.062 -0.689 -0.787  0.073 -0.727\n",
      "        2  0.69890   0.584  1.000  0.272 -0.212 -0.509 -0.072 -0.480\n",
      "        3  0.31639   0.062  0.272  1.000 -0.040 -0.054 -0.013 -0.042\n",
      "        4  0.74301  -0.689 -0.212 -0.040  1.000  0.600 -0.138  0.482\n",
      "        5  0.80118  -0.787 -0.509 -0.054  0.600  1.000 -0.064  0.633\n",
      "        6  0.18556   0.073 -0.072 -0.013 -0.138 -0.064  1.000 -0.076\n",
      "        7  0.73695  -0.727 -0.480 -0.042  0.482  0.633 -0.076  1.000\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n"
     ]
    }
   ],
   "source": [
    "# Now let's perform the actual fit\n",
    "fitresult = signalshape.fitTo(masshist2_RooFit) # fitTo is enough, without need for creating a variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fit output provides a lot of text, including the best fit values and their errors at the bottom.\n",
    "In addition, it prints the correlation coefficient matrix, which tells you how correlated certain parameters are with each other. The higher the correlation, the worse your knowledge of the actual values for these parameters, which is bad! Always try to reduce this as much as possible, by changing the model, or even fixing some parameters if necessary. Have a look at the output above to see if you can spot any issues with the fitting procedure (look for instance for notifications of 'PARAMETER AT LIMIT', or 'ADDED TO DIAGONAL'), or very large correlations between parameters. Do you understand what is being printed?<br/>\n",
    "<br/>\n",
    "Since the fit generates a lot of output, plot our stuff in a separate cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N(Bs0) = 129568 +- 1082\n",
      "chi2/ndf = 3.81694467879\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "frame = mass.frame()\n",
    "masshist2_RooFit.plotOn(frame)\n",
    "signalshape.plotOn(frame)\n",
    "\n",
    "frame.Draw()\n",
    "c1.Update()\n",
    "c1.Draw()\n",
    "\n",
    "signal_yield = gauss_Norm.getValV() + cb_Norm.getValV()\n",
    "signal_error = gauss_Norm.getError() + cb_Norm.getError()\n",
    "chi2ndf = frame.chiSquare()\n",
    "print(\"N(Bs0) = %.0f +- %.0f\"%(signal_yield,signal_error))\n",
    "print(\"chi2/ndf = \" + str(chi2ndf))\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This certainly looks better than before. Also the chi2/ndf is a lot lower (should be around 3 now). However, see if you can spot any regions where the line does not follow the data perfectly. In order to make these regions more clear, we can for instance plot the y-axis on a logarithmic scale. <br/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c1.SetLogy()\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also, it might be nice to see what the individual components (the Gaussian and the Crystal Ball) of our plot are doing. <br/> \n",
    "We can add them to the TCanvas individually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) directly selected PDF components: (myGauss)\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) indirectly selected PDF components: ()\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) directly selected PDF components: (myCB)\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) indirectly selected PDF components: ()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set the y-axis back to linear scale\n",
    "c1.SetLogy(0)\n",
    "\n",
    "# plot the individual components of the RooAddPdf\n",
    "signalshape.plotOn(frame, ROOT.RooFit.Components(\"myGauss\"), \n",
    "                   ROOT.RooFit.LineColor(8), ROOT.RooFit.LineStyle(2)) # soft green, dotted\n",
    "signalshape.plotOn(frame, ROOT.RooFit.Components(\"myCB\"),\n",
    "                   ROOT.RooFit.LineColor(46), ROOT.RooFit.LineStyle(2)) # soft red, dotted\n",
    "# plot the full PDF on top (again)\n",
    "signalshape.plotOn(frame) \n",
    "frame.Draw()\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another option is to make a so-called 'pull plot': this is basically a distribution of the difference between the line and the data, divided by the error, for every bin. With this you can investigate in which areas the fit is doing well, and where it does not. Let's try. <br/>\n",
    "In fact, let's make a function that makes this 'pull plot' for us, so we can call it very conveniently every time we do a fit in the future. Let's spend a little effort in making it look nice, for once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def makePullPlot(frame, var = mass) :\n",
    "  # frame is the var.frame where the data and PDF have been plotted on;\n",
    "  #  it contains information about the data and the last PDF plotted on it.\n",
    "  # var is the independent (x-axis) variable: we need to make a new frame for the pulls.\n",
    "\n",
    "  # Get the pull histogram. That's easy.\n",
    "  pullhist = frame.pullHist()\n",
    "\n",
    "  # Define a new canvas. We are going to split it into two pads.\n",
    "  cpull = ROOT.TCanvas(\"cpull\",\"cpull\",600,700)\n",
    "  # add two TPads in the single canvas\n",
    "  pullpad1 = ROOT.TPad(\"pullpad1\", \"\",0.0,0.25,1.0,1.0)\n",
    "  pullpad2 = ROOT.TPad(\"pullpad2\", \"\",0.0,0.0,1.0,0.25)\n",
    "\n",
    "  # Set the right margins\n",
    "  pullpad1.SetTopMargin(0.05)\n",
    "  pullpad1.SetBottomMargin(0)\n",
    "  pullpad1.SetLeftMargin(0.12)\n",
    "  pullpad1.SetRightMargin(0.05)\n",
    "  pullpad2.SetTopMargin(0)\n",
    "  pullpad2.SetBottomMargin(0.25)\n",
    "  pullpad2.SetLeftMargin(0.12)\n",
    "  pullpad2.SetRightMargin(0.05)\n",
    "\n",
    "  # plot the 'normal' frame on the top pad, this contained our fit curve and data \n",
    "  pullpad1.cd()\n",
    "  frame.SetTitle(\"\")\n",
    "  frame.Draw()\n",
    "\n",
    "  # Now let's plot the pullhist on the bottom pad, and make the labels the right size\n",
    "  pullpad2.cd()\n",
    "  framepull = var.frame()\n",
    "  framepull.addPlotable(pullhist)\n",
    "  framepull.SetTitle(\"\")\n",
    "  framepull.GetYaxis().SetTitle(\"Pull\")\n",
    "  framepull.GetYaxis().SetTitleOffset(0.4)\n",
    "  framepull.GetYaxis().SetTitleSize(0.1)\n",
    "  framepull.GetYaxis().SetLabelSize(0.1)\n",
    "  framepull.GetXaxis().SetTitleSize(0.1)\n",
    "  framepull.GetXaxis().SetLabelSize(0.1)\n",
    "  framepull.Draw()\n",
    "\n",
    "  # Draw the pads on the canvas\n",
    "  cpull.cd()\n",
    "  pullpad1.Draw()\n",
    "  pullpad2.Draw()\n",
    "  cpull.Update()\n",
    "  cpull.Draw()\n",
    "\n",
    "\n",
    "# Test our function, by drawing the pull histogram of our mass fit\n",
    "makePullPlot(frame)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a perfect fit, the pull should be gaussian distributed around 0, with a spread of about 1, and contain no structures. This seems not to be the case: we are too low in the left tail, and too high in the top to compensate. Perhaps we could try 3 Gaussians? In any case, the 'art of fitting' is a skill on its own, and highly trained by PhD students in high-energy physics. For now, let's say we have found a good enough shape to fit our Bs mass signal shape with."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##################\n",
    "# Exercise 4\n",
    "#  Fit the lifetime of the Bs0, using the sum of multiple shapes.\n",
    "#  The first one should be obvious. You can try a RooExponential (look for the syntax in the documentation, or on google)\n",
    "#  The second one is the lifetime acceptance. Use the shape defined on p.143 of the brilliant thesis by dr. de Vries, \n",
    "#   https://www.nikhef.nl/pub/services/biblio/theses_pdf/thesis_J_de_Vries.pdf\n",
    "#  In order to define a PDF in RooFit with a custom formula, have a look at the RooGenericPdf:\n",
    "#  - https://root.cern.ch/doc/master/classRooGenericPdf.html\n",
    "#  - https://root.cern.ch/root/html/tutorials/roofit/rf403_weightedevts.C.html  (Be careful, this is in C!)\n",
    "#\n",
    "#  Are there any highly correlated parameters? Is the fit quality OK?\n",
    "#  What do you find for the lifetime? Compare it to the world-average measurement value from the PDG:\n",
    "#  - pdglive.lbl.gov\n",
    "#################\n",
    "#page for RooRealVar syntax https://root.cern.ch/doc/master/RooRealVar_8cxx_source.html\n",
    "#from ROOT import RooArgList\n",
    "\n",
    "n_bins = 300\n",
    "Lifetimerange = [0.0,0.01]\n",
    "Lifetime = ROOT.RooRealVar(\"Lifetime\",\"Lifetime\", Lifetimerange[0], Lifetimerange[1],\"ns\") \n",
    "# variables for the RooExponential\n",
    "\n",
    "exponential_c = ROOT.RooRealVar(\"exponential_c\",\"C\", -600, -900, -400)\n",
    "myexponential = ROOT.RooExponential(\"myexponential\",\"Exponential\", Lifetime, exponential_c)\n",
    "\n",
    "#setting shape for lifetime acceptance\n",
    "#lifetime_acc_function = ROOT.TF1(\"lifetime_acc_function\", '((1-0.0494*( x - t0))*(1.382*( x - to))^(1.771))/(1+(1.382*( x - to))^(1.771))', 0.0, 0.001)\n",
    "#check roo generic pdf for function\n",
    "#Lifetime_acceptance = ROOT.RooCFunction1Binding(\"Lifetime_acceptance\", \"Lifetime Acceptance\", \"((1-0.0494*( x - 0.07742))*(1.382*( x - 0.07742))^(1.771))/(1+(1.382*( x - 0.07742))^(1.771))\", Lifetime)\n",
    "x = Lifetime\n",
    "B = ROOT.RooRealVar(\"B\", \"B\", -0.0494,)\n",
    "to = ROOT.RooRealVar(\"to\", \"to\", 0.07742)\n",
    "a = ROOT.RooRealVar(\"a\", \"a\", 1.382)\n",
    "n = ROOT.RooRealVar(\"n\", \"n\", 1.771)\n",
    "\n",
    "#Lifetime_acceptance = ROOT.RooGenericPdf(\"Lifetime_acceptance\", \"((1-0.0494*( x - 0.07742))*(1.382*( x - 0.07742))^(1.771))/(1+(1.382*( x - 0.7742))^(1.771))\", x)\n",
    "Lifetime_acceptance = ROOT.RooGenericPdf(\"Lifetime_acceptance\", \"((1+B*( x - to))*(a*( x - to))^(n))/(1+(a*( x - to))^(n))\", ROOT.RooArgList(x, B, to, a, n))\n",
    "\n",
    "\n",
    "exponential_Norm  = ROOT.RooRealVar(\"exponential_Norm\",\"Exponential Yield\", mctree.GetEntries()/nbins * 3, 0, mctree.GetEntries() * 2)\n",
    "Lifetime_acceptance_Norm  = ROOT.RooRealVar(\"Lifetime_acceptance_Norm\",\"Lifetime acceptance yield\", mctree.GetEntries()/nbins * 3, 0, mctree.GetEntries() * 2)\n",
    "\n",
    "# add the other shape and then sum them up in signalshape (missing lifetime acceptance)\n",
    "signalshape = ROOT.RooAddPdf(\"signalshape\",\"Signal shape\", ROOT.RooArgList(myexponential, Lifetime_acceptance), ROOT.RooArgList(exponential_Norm, Lifetime_acceptance_Norm) )\n",
    "\n",
    "\n",
    "Lifetimehist2_RooFit = ROOT.RooDataHist(\"Lifetimehist2_RooFit\",\"Lifetimehist2 RooFit\", ROOT.RooArgList(Lifetime), Lifetimehist2)\n",
    "\n",
    "c3.Clear()\n",
    "#fitresults = signalshape.fitTo(Lifetimehist2_RooFit)\n",
    "frame1 = Lifetime.frame()\n",
    "Lifetimehist2_RooFit.plotOn(frame1)\n",
    "signalshape.plotOn(frame1)\n",
    "frame1.Draw()\n",
    "c3.Update()\n",
    "c3.Draw()\n",
    "\n",
    "# actual fit\n",
    "#signalshape.fitTo(Lifetimehist2_RooFit)\n",
    "\n",
    "chi2ndf = frame1.chiSquare()\n",
    "print(\"chi2/ndf is: \" + str(chi2ndf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Fitting the real data </h1><br/>\n",
    "Now that we had some practice with simulated Bs --> Ds pi decays, let's have a look at the real data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "Datalocation = \"/Users/simoncalo/Data_B2DX_2016_Down_Bs2DsPi_KKPi.root\" # Real data\n",
    "\n",
    "datafile = ROOT.TFile(Datalocation, \"READONLY\")\n",
    "datatree = datafile.Get(\"DecayTree\")\n",
    "datatree.SetName(\"Datatree\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# switch back to the old canvas\n",
    "c1.cd()\n",
    "\n",
    "# draw the Bs mass in our real data tree\n",
    "datatree.Draw(\"lab0_MM\")\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OK, this is clearly something else. The cool thing is that we're looking at actual data collected by the LHCb detector in 2016, taken from proton-proton collisions at the LHC, at the highest energies achieved by mankind so far. It has taken billions of euro's and insane technical innovation to build these monstrous machines, and many hundreds of people to build, maintain, and run the experiment. The downside is that it does not look like our simulation at all. Although there is a clear peak at the Bs0 mass, there is some other stuff going on as well. <br/>\n",
    "Also, do note that this data sample has been triggered and pre-selected to contain events that look like Bs -> Ds pi (with Ds -> K K pi), otherwise we would have seen nothing at all. <br/>\n",
    "<br/>\n",
    "Let's first compare our data with our MC simulation. And since we're going to make some comparison plots later on, let's make a nice function to do this first. And add some nice useful options, and a legend, while we're at it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting comparison in lab0_MM between trees MCtree and Datatree\n",
      "- Using cuts1: abs(lab1_ID)==211 && abs(lab3_ID)==321 && abs(lab4_ID)==321 && abs(lab5_ID)==211 && (lab2_BKGCAT < 30 || lab2_BKGCAT == 50)&&(lab0_BKGCAT < 30 || lab0_BKGCAT == 50)\n",
      "- Using cuts2: 1==1\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_comparison(varname, xmin, xmax, \n",
    "    tree1=mctree, tree2=datatree, bins=200, cuts1 = \"1==1\", cuts2 = \"1==1\", \n",
    "    extralabel1=\"\", extralabel2=\"\", normalized=True, legendLocation=\"Left\") :\n",
    "    \n",
    "  # varname, xmin, xmax are the variable to compare, and min and max range.\n",
    "  # Default is to compare MC to data, but you can set tree1 and tree2, as well as cuts on them.\n",
    "  # Furthermore, let's add extra labels if we add cuts, make an option to draw the normalized distributions,\n",
    "  # and change the location of the legend to \"Left\" or \"Right\" if it gets in the way.\n",
    " \n",
    "  print(\"Plotting comparison in {0} between trees {1} and {2}\".format(varname, tree1.GetName(), tree2.GetName()))\n",
    "  print(\"- Using cuts1: {0}\".format(cuts1))\n",
    "  print(\"- Using cuts2: {0}\".format(cuts2))\n",
    "\n",
    "  # set the names\n",
    "  name1 = tree1.GetName() + str(extralabel1)\n",
    "  name2 = tree2.GetName() + str(extralabel2)\n",
    "\n",
    "  # draw the histograms with cuts\n",
    "  tree1.Draw(varname+\">>\"+name1+\"_\"+varname+\"(\"+str(bins)+\",\"+str(xmin)+\",\"+str(xmax)+\")\", cuts1)\n",
    "  tree2.Draw(varname+\">>\"+name2+\"_\"+varname+\"(\"+str(bins)+\",\"+str(xmin)+\",\"+str(xmax)+\")\", cuts2)\n",
    "  hist1 = ROOT.gDirectory.Get(name1+\"_\"+varname)\n",
    "  hist2 = ROOT.gDirectory.Get(name2+\"_\"+varname)\n",
    "    \n",
    "  # make fancy\n",
    "  hist1.SetTitle(varname)\n",
    "  hist1.GetXaxis().SetTitle(varname)\n",
    "  hist1.SetLineColor(2) # red for MC\n",
    "  hist1.SetLineWidth(3) \n",
    "  hist2.SetTitle(varname)\n",
    "  hist2.GetXaxis().SetTitle(varname)\n",
    "  hist2.SetLineColor(4) # blue for Data\n",
    "  hist2.SetLineWidth(3) \n",
    "  #hist1.SetAxisRange(0, 10, \"Y\")\n",
    "  #hist2.SetAxisRange(0, 10, \"Y\")\n",
    "\n",
    "  # allow normalized drawing\n",
    "  if(normalized) :\n",
    "    hist1.DrawNormalized()\n",
    "    hist2.DrawNormalized(\"same\")\n",
    "  else :\n",
    "    hist1.Draw()\n",
    "    hist2.Draw(\"same\")\n",
    "\n",
    "  # add a legend\n",
    "  leg = ROOT.TLegend(0.11,0.77,0.3,0.89) # borders size, fill color, font, text size\n",
    "  if(legendLocation==\"Right\") :\n",
    "    leg = ROOT.TLegend(0.11 + 0.59, 0.77, 0.3 + 0.59, 0.89)\n",
    "  leg.AddEntry(hist1, name1, \"l\") #add text to the legend\n",
    "  leg.AddEntry(hist2, name2, \"l\")\n",
    "  leg.Draw(\"same\")\n",
    "\n",
    "  # draw\n",
    "  c1.Update()\n",
    "  c1.Draw()\n",
    "\n",
    "  # return objects so they are stored in memory (or even use them later)\n",
    "  return #[hist1, hist2, leg]\n",
    "\n",
    "\n",
    "# Now plot the comparison of the Bs mass between data and MC simulation. \n",
    "# Don't forget to add the MCcuts to the simulation!\n",
    "plot_comparison(\"lab0_MM\",5000,6000, cuts1=MCcuts, normalized=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A clear difference. But at least the mean and the width of the signal peak seem to be spot-on.<br/>\n",
    "Visible is a large 'blob' on the left. This is caused by various misidentified final states, as well as decays with more particles in the final state than we are looking for (3 from the Ds, and one from the Bs = 4). The latter is known as 'partially reconstructed' decays. In addition, there seems to be an overall exponential spread out over the whole range. This is caused by wrong track combinations, that so happen to combine into a vertex by chance. This is called 'combinatorial background'. <br/>\n",
    "\n",
    "Perhaps we can reduce the background a bit, by investigating some other variables in the trees.<br/>\n",
    "Remember that the (Ds pi) combination can sometimes have a wrong identification for the pion? Well, in simulation we could get rid of those by matching to the Pythia generated ID. In real data, we have no such luxury. However, the LHCb RICH stations provide us with a measurement of the probability (or log-likelihood) that the particle is a certain type. We will have a look at PIDK: The probability of the particle being a kaon. Let's compare the distribution of this variable for data and simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting comparison in lab1_PIDK between trees MCtree and Datatree\n",
      "- Using cuts1: abs(lab1_ID)==211 && abs(lab3_ID)==321 && abs(lab4_ID)==321 && abs(lab5_ID)==211 && (lab2_BKGCAT < 30 || lab2_BKGCAT == 50)&&(lab0_BKGCAT < 30 || lab0_BKGCAT == 50)\n",
      "- Using cuts2: 1==1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_comparison(\"lab1_PIDK\", -150, 50, cuts1=MCcuts) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we believe that the pions in the simulation behave the same as actual real data pions would, we see that in data, the PIDK variable goes to much higher values. This could mean that we have some particles that are actually kaons. Therefore, a first nice cut would be to throw away all data with too high lab1_PIDK values. Let's do this, and plot the difference we just made."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting comparison in lab0_MM between trees Datatree and Datatree\n",
      "- Using cuts1: 1==1\n",
      "- Using cuts2: lab1_PIDK < 15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cut away events where the pion from (Ds pi) (i.e. lab1) is very Kaon-like.\n",
    "Datacuts = \"lab1_PIDK < 15\"\n",
    "\n",
    "# Plot the difference between the data with, and without, the Datacuts\n",
    "plot_comparison(\"lab0_MM\", 5000, 6000, \n",
    "    tree1=datatree, tree2=datatree, cuts1=\"1==1\", cuts2=Datacuts, extralabel1=\"_nocuts\", extralabel2=\"_cuts\", \n",
    "    normalized=False, legendLocation=\"Right\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Overall, the shape height has decreased. This means that the background has been reduced! The peak component seems to still be the same (with less background below it), which is promising. Let us investigate some more variables. <br/>\n",
    "Good variables to investigate are\n",
    "- The PIDK of the daughters of the Ds (lab3,4,5)\n",
    "- The mass of the Ds (lab2) : perhaps we can cut tightly around the Ds mass peak to exclude the 'sideband' background?\n",
    "- The lifetime of the Ds and the Bs. The longer they live, the more likely a real 'Ds' or 'Bs' particle was formed!\n",
    "- The lab1 (lab3,4,5) IPCHI2_OWNPV variable. This variable is related to how well the particle track\n",
    "   points back to the Primary proton-proton collision vertex (PV). If particles originate from secondary decays,\n",
    "   and are not directly produced, they should be pointing away (i.e. have a large value).\n",
    "   However, if the particles were produced in the PV, and not in a Bs or Ds decay, they should point directly\n",
    "   to the PV, and have a low value for the IPCHI2_OWNPV.\n",
    "- The BDTGResponse_3 variable. This is the output of a machine learning algorithm (a Boosted Decision Tree), that\n",
    "   has been trained to separate signal from combinatorial background.\n",
    "- Any other parameter that you might think of! (if you find a nice one, please report back to the teacher :-) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting comparison in lab0_MM between trees Datatree and Datatree\n",
      "- Using cuts1: 1==1\n",
      "- Using cuts2: lab1_PIDK < 15 && lab5_PIDK < 5 && lab3_PIDK > 6 && lab4_PIDK > 6 && lab2_MM > 1900 && lab2_TAU < 0.003 && lab0_TAU > 0.0002 && lab0_TAU < 0.0078 && lab1_IPCHI2_OWNPV < 17000 && lab3_IPCHI2_OWNPV < 7000 && lab4_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 7000 && lab5_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 6800 && BDTGResponse_3 < 0.999\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#############\n",
    "# Exercise 5\n",
    "#  Investigate other parameters in the trees, to reduce the background even further, \n",
    "#   while keeping as much signal as possible.\n",
    "#  Use the plot_comparison function to find out if there is anything to gain, w.r.t. simulated signal.\n",
    "#############\n",
    "\n",
    "#plot_comparison(\"lab5_PIDK\", -150, 50, cuts1=MCcuts, legendLocation=\"Right\") \n",
    "\n",
    "#Datacuts2 = \"lab1_PIDK < 15\"\n",
    "#Datacuts2 = \"lab5_PIDK < 5\"\n",
    "#Datacuts2 = \"lab3_PIDK > 6\"\n",
    "#Datacuts2 = \"lab4_PIDK > 6\" #reached this point\n",
    "#Datacuts2 = \"lab2_MM > 1900\"\n",
    "#Datacuts2 = \"lab2_TAU < 0.003\"\n",
    "#Datacuts2 = \"lab0_TAU > 0.0002 && lab0_TAU < 0.0078\"\n",
    "#Datacuts2 = \"lab1_IPCHI2_OWNPV < 17000\"\n",
    "#Datacuts2 = \"lab3_IPCHI2_OWNPV < 7000\"\n",
    "#Datacuts2 = \"lab4_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 7000\"\n",
    "#Datacuts2 = \"lab5_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 6800\"\n",
    "#Datacuts2 = \"BDTGResponse_3 < 0.999\"\n",
    "Datacuts2 = \"lab1_PIDK < 15 && lab5_PIDK < 5 && lab3_PIDK > 6 && lab4_PIDK > 6 && lab2_MM > 1900 && lab2_TAU < 0.003 && lab0_TAU > 0.0002 && lab0_TAU < 0.0078 && lab1_IPCHI2_OWNPV < 17000 && lab3_IPCHI2_OWNPV < 7000 && lab4_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 7000 && lab5_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 6800 && BDTGResponse_3 < 0.999\" \n",
    "\n",
    "#Datacuts2 = \"lab1_PIDK < 15 && lab5_PIDK < 5 && lab3_PIDK > 6 && lab4_PIDK > 6 && lab2_MM > 1890\"\n",
    "\n",
    "plot_comparison(\"lab0_MM\", 5000, 6000, tree1=datatree, tree2=datatree, cuts1=\"1==1\", cuts2=Datacuts2, extralabel1=\"_nocuts\", extralabel2=\"_cuts\", normalized=False, legendLocation=\"Right\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting comparison in lab0_MM between trees Datatree and Datatree\n",
      "- Using cuts1: 1==1\n",
      "- Using cuts2: lab1_PIDK < 15 && lab5_PIDK < 5 && lab3_PIDK > 6 && lab4_PIDK > 6 && lab2_MM > 1900 && lab2_TAU < 0.003 && lab0_TAU > 0.0002 && lab0_TAU < 0.0078 && lab1_IPCHI2_OWNPV < 17000 && lab3_IPCHI2_OWNPV < 7000 && lab4_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 7000 && lab5_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 6800 && BDTGResponse_3 < 0.999\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_comparison(\"lab0_MM\", 5000, 6000, \n",
    "    tree1=datatree, tree2=datatree, cuts1=\"1==1\", cuts2=Datacuts2, extralabel1=\"_nocuts\", extralabel2=\"_cuts\", \n",
    "    normalized=False, legendLocation=\"Right\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have reduced the background as much as possible, we should try to do our final exercise: to fit the signal yield. For the signal shape, you may use the one we obtained from the simulation. If you trust fully in the simulation, you can even fix parameters like the tail parameters (n and alpha) of the CB, or even the widths. This is done with RooRealVar::setConstant(True). For the combinatorial background, you can use a simple exponential. <br/>\n",
    "<br/>\n",
    "Regarding the left blob of the signal peak, try to get creative. Analyzing the various components in there, using both simulation and control samples in data, is required for a proper analysis, but this is not required of you by this point. The thing is, you never know how much the tails of this blob will extend under the signal peak! You may find some inspiration from the 2011 LHCb paper, <a href=\"https://arxiv.org/pdf/1204.1237.pdf\">Measurements of the branching fractions of the decays Bs -> Ds K and Bs -> Ds pi</a>. <br/>\n",
    "<br/>\n",
    "Use the tools we developed above to check the quality of your fit, such as the pull distribution, and plotting the individual components in your RooAddPdf. Don't forget to plot without fitting, to see if your initial parameters make sense!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the LBG yield is: <ROOT.RooRealVar object (\"gauss_LBG_Norm\") at 0x7fe844d8b0c0>\n",
      "\n",
      "\u001b[1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby\u001b[0m \n",
      "                Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University\n",
      "                All rights reserved, please read http://roofit.sourceforge.net/license.txt\n",
      "\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(hist2_RooFit): fit range of variable mass expanded to nearest bin boundaries: [5000,6000] --> [5000,6000]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "###########\n",
    "# Final exercise:\n",
    "#  Obtain the yield (= N events) of Bs -> Ds pi.\n",
    "#  Use the hints above to complete this task.\n",
    "#  Try to get the lowest chi2/ndf for the fit, and the lowest error on the signal yield!\n",
    "###########\n",
    "varname = \"lab0_MM\"\n",
    "bins = 200\n",
    "xmin = 5000\n",
    "xmax = 6000\n",
    "\n",
    "\n",
    "cuts2 = \"lab1_PIDK < 15 && lab5_PIDK < 5 && lab3_PIDK > 6 && lab4_PIDK > 6 && lab2_MM > 1900 && lab2_TAU < 0.003 && lab0_TAU > 0.0002 && lab0_TAU < 0.0078 && lab1_IPCHI2_OWNPV < 17000 && lab3_IPCHI2_OWNPV < 7000 && lab4_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 7000 && lab5_IPCHI2_OWNPV > 5 && lab5_IPCHI2_OWNPV < 6800 && BDTGResponse_3 < 0.999\" \n",
    "\n",
    "name2 = datatree.GetName() + \"\"\n",
    "\n",
    "datatree.Draw(varname+\">>\"+name2+\"_\"+varname+\"(\"+str(bins)+\",\"+str(xmin)+\",\"+str(xmax)+\")\", cuts2)\n",
    "\n",
    "hist2 = ROOT.gDirectory.Get(name2+\"_\"+varname)\n",
    "\n",
    "hist2.SetTitle(varname)\n",
    "hist2.GetXaxis().SetTitle(varname)\n",
    "hist2.SetLineColor(4) # blue for Data\n",
    "hist2.SetLineWidth(3)\n",
    "\n",
    "hist2.Draw()\n",
    "\n",
    "# Define the 'independent' variable, or x-axis\n",
    "mass        = ROOT.RooRealVar(\"mass\",\"Mass\",xmin, xmax,\"MeV/c^{2}\")\n",
    "\n",
    "exponential_c = ROOT.RooRealVar(\"exponential_c\",\"C\", -0.001, -0.1, 0.0)\n",
    "myexponential = ROOT.RooExponential(\"myexponential\",\"Exponential\", mass, exponential_c)\n",
    "\n",
    "\n",
    "# Build the variables for the Gaussian\n",
    "#  Syntax is RooRealVar(\"name\",\"title\",initial_value,minrange,maxrange)\n",
    "gauss_mean  = ROOT.RooRealVar(\"gauss_mean\",\"Mean\",5370,5340,5390)\n",
    "gauss_width = ROOT.RooRealVar(\"gauss_width\",\"Width\",10,6,40)\n",
    "myGauss    = ROOT.RooGaussian(\"myGauss\",\"Gaussian\", mass, gauss_mean, gauss_width)\n",
    "\n",
    "# Build the variables for the Crystal Ball\n",
    "cb_width    = ROOT.RooRealVar(\"cb_width\",\"CB Width\",17,8,50)\n",
    "cb_alpha    = ROOT.RooRealVar(\"cb_alpha\",\"Exp.const\",1.0,0.0,5.0)\n",
    "cb_n        = ROOT.RooRealVar(\"cb_n\",\"Exp.crossover\",1.0,0.0,15.0)\n",
    "# these are all the parameters required by a crystal ball shape\n",
    "myCB        = ROOT.RooCBShape(\"myCB\",\"Crystal Ball\", mass, gauss_mean, cb_width, cb_alpha, cb_n)\n",
    "\n",
    "gauss_mean_LBG  = ROOT.RooRealVar(\"gauss_mean_LBG\",\"Mean\",5100,5000,5250)\n",
    "gauss_width_LBG = ROOT.RooRealVar(\"gauss_width_LBG\",\"Width\",70,50,150)\n",
    "myGauss_LBG    = ROOT.RooGaussian(\"myGauss_LBG\",\"Gaussian\", mass, gauss_mean_LBG, gauss_width_LBG)\n",
    "\n",
    "# Define the normalisation constants for both shapes, and add them together\n",
    "gauss_Norm  = ROOT.RooRealVar(\"gauss_Norm\",\"Gauss Yield\", datatree.GetEntries()/nbins * 3/10, 0, datatree.GetEntries() * 2)\n",
    "cb_Norm     = ROOT.RooRealVar(\"cb_Norm\",\"CB Yield\", datatree.GetEntries()/nbins * 3/10, 0, datatree.GetEntries() * 2)\n",
    "exponential_Norm  = ROOT.RooRealVar(\"exponential_Norm\",\"Exponential Yield\", datatree.GetEntries()/nbins * 3, 0, datatree.GetEntries() * 2)\n",
    "gauss_LBG_Norm = ROOT.RooRealVar(\"gauss_LBG_Norm\",\"Gauss LBG Yield\", datatree.GetEntries()/nbins * 3/10, 0, datatree.GetEntries() * 2)\n",
    "#signalshape = ROOT.RooAddPdf(\"signalshape\",\"Signal shape\", ROOT.RooArgList(myGauss,myCB,myexponential, myGauss_LBG), ROOT.RooArgList(gauss_Norm, cb_Norm, exponential_Norm,gauss_LBG_Norm) )\n",
    "\n",
    "Actual_signalshape = ROOT.RooAddPdf (\"Actual_signalshape\", \"Shape of the interesting events\", ROOT.RooArgList(myGauss, myCB), ROOT.RooArgList(gauss_Norm, cb_Norm))\n",
    "Actual_signalshape_Norm = ROOT.RooRealVar(\"Actual_signalshape_Norm\",\"Signal Yield\", datatree.GetEntries()/nbins * 3/10, 0, datatree.GetEntries() * 2)\n",
    "\n",
    "signalshape = ROOT.RooAddPdf(\"signalshape\",\"Signal shape\", ROOT.RooArgList(Actual_signalshape, myexponential, myGauss_LBG), ROOT.RooArgList(Actual_signalshape_Norm, exponential_Norm,gauss_LBG_Norm) )\n",
    "\n",
    "\n",
    "print(\"the LBG yield is: \" + str(gauss_LBG_Norm.getValV()))\n",
    "\n",
    "# Transform the histogram into something RooFit can deal with\n",
    "hist2_RooFit = ROOT.RooDataHist(\"hist2_RooFit\",\"hist2 RooFit\", ROOT.RooArgList(mass), hist2)\n",
    "\n",
    "# plot everything on a frame, then plot the frame on the canvas.\n",
    "\n",
    "frame = mass.frame()\n",
    "hist2_RooFit.plotOn(frame)\n",
    "signalshape.plotOn(frame)\n",
    "\n",
    "frame.Draw()\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chi2/ndf is: 2.9232587278173474\n",
      "The yield under LBG is : 107803.66336282901\n",
      "The yield of the actual events is : 51084.0641238403\n",
      "[#1] INFO:Minization -- p.d.f. provides expected number of events, including extended term in likelihood.\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions will be evaluated in cache-and-track mode: (myGauss,myCB,myexponential,myGauss_LBG)\n",
      " **********\n",
      " **   73 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **   74 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 Actual_signalshape_Norm   5.10841e+04  4.30940e+02    0.00000e+00  1.25695e+06\n",
      "     2 cb_Norm      4.75514e+04  4.95836e+04    0.00000e+00  1.25695e+06\n",
      " MINUIT WARNING IN PARAMETR\n",
      " ============== VARIABLE2 BROUGHT BACK INSIDE LIMITS.\n",
      "     3 cb_alpha     4.52145e+00  3.88709e+00    0.00000e+00  5.00000e+00\n",
      " MINUIT WARNING IN PARAMETR\n",
      " ============== VARIABLE3 BROUGHT BACK INSIDE LIMITS.\n",
      "     4 cb_n         1.32380e+01  9.26452e+00    0.00000e+00  1.50000e+01\n",
      " MINUIT WARNING IN PARAMETR\n",
      " ============== VARIABLE4 BROUGHT BACK INSIDE LIMITS.\n",
      "     5 cb_width     1.68009e+01  1.91253e-01    8.00000e+00  5.00000e+01\n",
      "     6 exponential_Norm   1.82458e+05  1.29824e+03    0.00000e+00  1.25695e+06\n",
      "     7 exponential_c  -7.39564e-04  2.24848e-05   -1.00000e-01  0.00000e+00\n",
      "     8 gauss_LBG_Norm   1.07804e+05  1.10895e+03    0.00000e+00  1.25695e+06\n",
      "     9 gauss_Norm   1.40497e+04  1.47664e+04    0.00000e+00  1.25695e+06\n",
      " MINUIT WARNING IN PARAMETR\n",
      " ============== VARIABLE9 BROUGHT BACK INSIDE LIMITS.\n",
      "    10 gauss_mean   5.36657e+03  1.23501e-01    5.34000e+03  5.39000e+03\n",
      "    11 gauss_mean_LBG   5.13430e+03  6.58995e-01    5.00000e+03  5.25000e+03\n",
      "    12 gauss_width   4.00000e+01  7.83321e-01    6.00000e+00  4.00000e+01\n",
      " MINUIT WARNING IN PARAMETR\n",
      " ============== VARIABLE12 BROUGHT BACK INSIDE LIMITS.\n",
      "    13 gauss_width_LBG   9.88832e+01  8.50854e-01    5.00000e+01  1.50000e+02\n",
      " **********\n",
      " **   75 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **   76 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **   77 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **   78 **MIGRAD        6500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-1.73421e+06 FROM MIGRAD    STATUS=INITIATE       48 CALLS          49 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  Actual_signalshape_Norm   5.10841e+04   4.30940e+02   1.73632e-03  -1.16596e+00\n",
      "   2  cb_Norm      4.75514e+04   4.95836e+04   2.80725e-01  -2.27336e+00\n",
      "   3  cb_alpha     4.52145e+00   3.88709e+00   1.20563e+00  -1.74214e-02\n",
      "   4  cb_n         1.32380e+01   9.26452e+00   1.02918e+00  -8.81078e-06\n",
      "   5  cb_width     1.68009e+01   1.91253e-01   1.11893e-02  -2.74296e-01\n",
      "   6  exponential_Norm   1.82458e+05   1.29824e+03   2.93208e-03   3.50540e-01\n",
      "   7  exponential_c  -7.39564e-04   2.24848e-05   2.62460e-03  -2.49402e+00\n",
      "   8  gauss_LBG_Norm   1.07804e+05   1.10895e+03   3.15074e-03   1.46435e-01\n",
      "   9  gauss_Norm   1.40497e+04   1.47664e+04   1.51020e-01   2.98684e-01\n",
      "  10  gauss_mean   5.36657e+03   1.23501e-01   4.94983e-03  -3.67856e-02\n",
      "  11  gauss_mean_LBG   5.13430e+03   6.58995e-01   5.28664e-03   1.31807e-01\n",
      "  12  gauss_width   4.00000e+01   7.83321e-01   1.53091e-01** at limit **\n",
      "  13  gauss_width_LBG   9.88832e+01   8.50854e-01   1.70222e-02  -2.93597e-01\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD FAILS TO FIND IMPROVEMENT\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1.73421e+06 FROM HESSE     STATUS=OK            155 CALLS         215 TOTAL\n",
      "                     EDM=0.000178884    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  Actual_signalshape_Norm   5.10841e+04   4.04938e+02   9.95673e-04  -1.13350e+00\n",
      "   2  cb_Norm      4.75514e+04   1.01748e+04   7.25708e-03  -1.06568e-01\n",
      "   3  cb_alpha     4.52145e+00   3.88730e+00   5.00000e-01  -4.94402e-03\n",
      "   4  cb_n         1.32380e+01   1.29975e+01   5.00000e-01  -7.43894e-06\n",
      "   5  cb_width     1.68009e+01   1.81944e-01   5.86597e-03  -6.14259e-02\n",
      "   6  exponential_Norm   1.82458e+05   1.24236e+03   1.05386e-03   4.84818e-01\n",
      "   7  exponential_c  -7.39564e-04   2.16724e-05   1.01729e-03   8.39680e-02\n",
      "   8  gauss_LBG_Norm   1.07804e+05   1.07646e+03   1.11220e-03   8.26481e-02\n",
      "   9  gauss_Norm   1.40497e+04   3.12594e+03   3.91800e-03   1.92446e-01\n",
      "  10  gauss_mean   5.36657e+03   1.23367e-01   4.50118e-03  -1.18014e-02\n",
      "  11  gauss_mean_LBG   5.13430e+03   6.46662e-01   4.80747e-03   1.13957e-01\n",
      "  12  gauss_width   4.00000e+01   9.39585e-01   2.90331e-01** at limit **\n",
      "  13  gauss_width_LBG   9.88832e+01   8.36665e-01   1.02066e-02   5.15593e-02\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD FAILS TO FIND IMPROVEMENT\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " FCN=-1.73421e+06 FROM MIGRAD    STATUS=CONVERGED     225 CALLS         226 TOTAL\n",
      "                     EDM=0.000178884    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  Actual_signalshape_Norm   5.10841e+04   4.04938e+02   0.00000e+00  -1.13350e+00\n",
      "   2  cb_Norm      4.75514e+04   1.01748e+04   0.00000e+00  -1.06568e-01\n",
      "   3  cb_alpha     4.52145e+00   3.88730e+00   0.00000e+00  -4.94402e-03\n",
      "   4  cb_n         1.32380e+01   1.29975e+01   0.00000e+00  -7.43894e-06\n",
      "   5  cb_width     1.68009e+01   1.81944e-01   0.00000e+00  -6.14259e-02\n",
      "   6  exponential_Norm   1.82458e+05   1.24236e+03  -0.00000e+00   4.84818e-01\n",
      "   7  exponential_c  -7.39564e-04   2.16724e-05   0.00000e+00   8.39680e-02\n",
      "   8  gauss_LBG_Norm   1.07804e+05   1.07646e+03   0.00000e+00   8.26481e-02\n",
      "   9  gauss_Norm   1.40497e+04   3.12594e+03  -0.00000e+00   1.92446e-01\n",
      "  10  gauss_mean   5.36657e+03   1.23367e-01  -0.00000e+00  -1.18014e-02\n",
      "  11  gauss_mean_LBG   5.13430e+03   6.46662e-01  -0.00000e+00   1.13957e-01\n",
      "  12  gauss_width   4.00000e+01   9.39585e-01  -0.00000e+00** at limit **\n",
      "  13  gauss_width_LBG   9.88832e+01   8.36665e-01  -0.00000e+00   5.15593e-02\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR= 13    ERR DEF=0.5\n",
      " ELEMENTS ABOVE DIAGONAL ARE NOT PRINTED.\n",
      "  1.640e+05 \n",
      " -4.075e+05  1.036e+08 \n",
      " -1.434e+00  2.808e+00  3.087e+01 \n",
      " -1.264e+03  1.353e+03  4.715e+01  1.279e+06 \n",
      " -1.535e+01  1.156e+02  9.521e-04  4.854e-01  3.310e-02 \n",
      " -2.117e+05  7.892e+05  7.954e-01  4.063e+02  2.936e+01  1.543e+06 \n",
      "  3.126e-03 -1.152e-02 -1.126e-08 -5.612e-06 -4.264e-07 -2.313e-02  4.697e-10 \n",
      "  9.888e+04 -3.821e+05  6.373e-01  8.574e+02 -1.403e+01 -1.150e+06  2.001e-02  1.159e+06 \n",
      "  1.246e+05  2.944e+07 -4.337e+00 -2.522e+03 -1.302e+02 -2.222e+05  3.284e-03  9.771e+04  9.773e+06 \n",
      " -3.918e+00  6.700e+00  2.630e-05  4.482e-02 -3.047e-04 -1.144e+01  1.727e-07  1.536e+01 -3.242e+00  1.522e-02 \n",
      " -6.987e+01  2.736e+02  1.072e-03  9.709e-01  1.076e-02  3.095e+02 -5.834e-06 -2.397e+02 -7.740e+01  1.981e-03  4.182e-01 \n",
      " -1.434e-01  2.113e+00 -2.578e-06 -1.566e-03 -6.614e-05  2.734e-01 -3.928e-09 -1.303e-01  1.101e+00  3.433e-06  1.046e-04 \n",
      " -1.434e-01  2.113e+00 -2.578e-06 -1.566e-03 -6.614e-05  2.734e-01 -3.928e-09 -1.303e-01  1.101e+00  3.433e-06  1.046e-04  2.176e-06 \n",
      " -6.831e+01  1.658e+02  1.820e-03  1.759e+00  5.565e-03 -4.619e+02  8.174e-06  5.304e+02 -8.622e+01  1.731e-02 -1.909e-01 \n",
      " -6.831e+01  1.658e+02  1.820e-03  1.759e+00  5.565e-03 -4.619e+02  8.174e-06  5.304e+02 -8.622e+01  1.731e-02 -1.909e-01  3.525e-05  7.001e-01 \n",
      " PARAMETER  CORRELATION COEFFICIENTS  \n",
      "       NO.  GLOBAL      1      2      3      4      5      6      7      8      9     10     11     12     13\n",
      "        1  0.74137   1.000 -0.099 -0.001 -0.003 -0.208 -0.421  0.356  0.227  0.098 -0.078 -0.267 -0.240 -0.202\n",
      "        2  0.98197  -0.099  1.000  0.000  0.000  0.062  0.062 -0.052 -0.035  0.925  0.005  0.042  0.141  0.019\n",
      "        3  0.00759  -0.001  0.000  1.000  0.008  0.001  0.000 -0.000  0.000 -0.000  0.000  0.000 -0.000  0.000\n",
      "        4  0.00869  -0.003  0.000  0.008  1.000  0.002  0.000 -0.000  0.001 -0.001  0.000  0.001 -0.001  0.002\n",
      "        5  0.79546  -0.208  0.062  0.001  0.002  1.000  0.130 -0.108 -0.072 -0.229 -0.014  0.091 -0.246  0.037\n",
      "        6  0.91072  -0.421  0.062  0.000  0.000  0.130  1.000 -0.859 -0.860 -0.057 -0.075  0.385  0.149 -0.444\n",
      "        7  0.89688   0.356 -0.052 -0.000 -0.000 -0.108 -0.859  1.000  0.858  0.048  0.065 -0.416 -0.123  0.451\n",
      "        8  0.91656   0.227 -0.035  0.000  0.001 -0.072 -0.860  0.858  1.000  0.029  0.116 -0.344 -0.082  0.589\n",
      "        9  0.98331   0.098  0.925 -0.000 -0.001 -0.229 -0.057  0.048  0.029  1.000 -0.008 -0.038  0.239 -0.033\n",
      "       10  0.20074  -0.078  0.005  0.000  0.000 -0.014 -0.075  0.065  0.116 -0.008  1.000  0.025  0.019  0.168\n",
      "       11  0.54510  -0.267  0.042  0.000  0.001  0.091  0.385 -0.416 -0.344 -0.038  0.025  1.000  0.110 -0.353\n",
      "       12  0.56903  -0.240  0.141 -0.000 -0.001 -0.246  0.149 -0.123 -0.082  0.239  0.019  0.110  1.000  0.029\n",
      "       13  0.74185  -0.202  0.019  0.000  0.002  0.037 -0.444  0.451  0.589 -0.033  0.168 -0.353  0.029  1.000\n",
      " ELEMENTS ABOVE DIAGONAL ARE NOT PRINTED.\n",
      " **********\n",
      " **   79 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **   80 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **   81 **HESSE        6500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1.73421e+06 FROM HESSE     STATUS=OK            139 CALLS         365 TOTAL\n",
      "                     EDM=0.000359738    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  Actual_signalshape_Norm   5.10841e+04   4.30942e+02   1.99135e-04  -1.16482e+00\n",
      "   2  cb_Norm      4.75514e+04   4.95825e+04   2.90283e-04  -1.17930e+00\n",
      "   3  cb_alpha     4.52145e+00   3.88709e+00   5.00000e-01   9.41737e-01\n",
      "   4  cb_n         1.32380e+01   9.24666e+00   2.00000e-02   8.71146e-01\n",
      "   5  cb_width     1.68009e+01   1.91253e-01   2.34639e-04  -6.19845e-01\n",
      "   6  exponential_Norm   1.82458e+05   1.29826e+03   4.21543e-05  -7.89045e-01\n",
      "   7  exponential_c  -7.39564e-04   2.24851e-05   4.06916e-05   1.39859e+00\n",
      "   8  gauss_LBG_Norm   1.07804e+05   1.10896e+03   4.44881e-05  -9.76366e-01\n",
      "   9  gauss_Norm   1.40497e+04   1.47661e+04   1.56720e-04  -1.35895e+00\n",
      "  10  gauss_mean   5.36657e+03   1.23501e-01   1.80047e-04   6.28387e-02\n",
      "  11  gauss_mean_LBG   5.13430e+03   6.58997e-01   1.92299e-04   7.44765e-02\n",
      "  12  gauss_width   4.00000e+01   7.83323e-01   5.00000e-01   1.57054e+00\n",
      "                                 WARNING -   - ABOVE PARAMETER IS AT LIMIT.\n",
      "  13  gauss_width_LBG   9.88832e+01   8.50858e-01   4.08263e-04  -2.23377e-02\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR= 13    ERR DEF=0.5\n",
      " ELEMENTS ABOVE DIAGONAL ARE NOT PRINTED.\n",
      "  1.857e+05 \n",
      " -6.847e+05  2.494e+09 \n",
      " -1.110e+00  1.020e+01  3.088e+01 \n",
      " -1.832e+03  1.976e+05  7.816e+01  1.336e+06 \n",
      " -1.112e+01  4.124e+01  4.467e-04  3.835e-01  3.658e-02 \n",
      " -2.578e+05  1.342e+06 -2.725e-02 -6.063e+02  2.179e+01  1.685e+06 \n",
      "  3.805e-03 -1.958e-02  1.086e-09  1.212e-05 -3.186e-07 -2.538e-02  5.056e-10 \n",
      "  1.232e+05 -6.573e+05  1.142e+00  2.518e+03 -1.068e+01 -1.245e+06  2.158e-02  1.230e+06 \n",
      "  1.087e+04  7.363e+08  2.237e-01  5.548e+04 -1.759e+02 -5.780e+03  1.548e-04 -5.064e+03  2.190e+08 \n",
      " -4.331e+00  1.259e+01  1.943e-05  9.267e-02 -4.974e-04 -1.152e+01  1.773e-07  1.585e+01 -3.704e-01  1.525e-02 \n",
      " -8.504e+01  4.706e+02  8.181e-04  1.302e+00  7.719e-03  3.539e+02 -6.527e-06 -2.689e+02  4.072e+00  1.953e-03  4.343e-01 \n",
      " -2.275e-01  3.206e+00 -1.897e-06 -1.897e-03 -8.454e-05  4.413e-01 -6.387e-09 -2.139e-01  1.550e+00  5.461e-06  1.635e-04 \n",
      " -2.275e-01  3.206e+00 -1.897e-06 -1.897e-03 -8.454e-05  4.413e-01 -6.387e-09 -2.139e-01  1.550e+00  5.461e-06  1.635e-04  1.811e-06 \n",
      " -7.229e+01  2.391e+02  1.849e-03  3.390e+00  4.094e-03 -4.846e+02  8.623e-06  5.569e+02 -5.066e+01  1.809e-02 -1.999e-01 \n",
      " -7.229e+01  2.391e+02  1.849e-03  3.390e+00  4.094e-03 -4.846e+02  8.623e-06  5.569e+02 -5.066e+01  1.809e-02 -1.999e-01  6.136e-05  7.240e-01 \n",
      " PARAMETER  CORRELATION COEFFICIENTS  \n",
      "       NO.  GLOBAL      1      2      3      4      5      6      7      8      9     10     11     12     13\n",
      "        1  0.77611   1.000 -0.032 -0.000 -0.004 -0.135 -0.461  0.393  0.258  0.002 -0.081 -0.299 -0.392 -0.197\n",
      "        2  0.99926  -0.032  1.000  0.000  0.003  0.004  0.021 -0.017 -0.012  0.996  0.002  0.014  0.048  0.006\n",
      "        3  0.01220  -0.000  0.000  1.000  0.012  0.000 -0.000  0.000  0.000  0.000  0.000  0.000 -0.000  0.000\n",
      "        4  0.01434  -0.004  0.003  0.012  1.000  0.002 -0.000  0.000  0.002  0.003  0.001  0.002 -0.001  0.003\n",
      "        5  0.81710  -0.135  0.004  0.000  0.002  1.000  0.088 -0.074 -0.050 -0.062 -0.021  0.061 -0.328  0.025\n",
      "        6  0.91858  -0.461  0.021 -0.000 -0.000  0.088  1.000 -0.870 -0.865 -0.000 -0.072  0.414  0.253 -0.439\n",
      "        7  0.90459   0.393 -0.017  0.000  0.000 -0.074 -0.870  1.000  0.865  0.000  0.064 -0.441 -0.211  0.451\n",
      "        8  0.92158   0.258 -0.012  0.000  0.002 -0.050 -0.865  0.865  1.000 -0.000  0.116 -0.368 -0.143  0.590\n",
      "        9  0.99926   0.002  0.996  0.000  0.003 -0.062 -0.000  0.000 -0.000  1.000 -0.000  0.000  0.078 -0.004\n",
      "       10  0.20588  -0.081  0.002  0.000  0.001 -0.021 -0.072  0.064  0.116 -0.000  1.000  0.024  0.033  0.172\n",
      "       11  0.56852  -0.299  0.014  0.000  0.002  0.061  0.414 -0.441 -0.368  0.000  0.024  1.000  0.184 -0.356\n",
      "       12  0.71972  -0.392  0.048 -0.000 -0.001 -0.328  0.253 -0.211 -0.143  0.078  0.033  0.184  1.000  0.054\n",
      "       13  0.75180  -0.197  0.006  0.000  0.003  0.025 -0.439  0.451  0.590 -0.004  0.172 -0.356  0.054  1.000\n",
      " ELEMENTS ABOVE DIAGONAL ARE NOT PRINTED.\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) directly selected PDF components: (Actual_signalshape)\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) indirectly selected PDF components: (myGauss,myCB)\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) directly selected PDF components: (myexponential)\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) indirectly selected PDF components: ()\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) directly selected PDF components: (myGauss_LBG)\n",
      "[#1] INFO:Plotting -- RooAbsPdf::plotOn(signalshape) indirectly selected PDF components: ()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# range_LGB = mass.setRange(\"range_LGB\", 5320, 5420)\n",
    "# range_exponential = mass.setRange(\"range_exponential\", 5330, 5400)\n",
    "\n",
    "\n",
    "# integral_LGB = myGauss_LBG.createIntegral(ROOT.RooArgSet(mass), \"range_LGB\") # this is the integral of LGB under the signal approximately\n",
    "# integral_exponential = myexponential.createIntegral(ROOT.RooArgSet(mass), \"range_exponential\") # this is the integral of LGB under the signal approximately\n",
    "\n",
    "\n",
    "# print(\"The area of the LGB under the signal is: \" + str(integral_LGB.getVal()))\n",
    "# print(\"The area of the exponential background under the signal is: \" + str(integral_exponential.getVal()))\n",
    "\n",
    "\n",
    "#NormSet(x),Range(\"signal\")\n",
    "fitresult = signalshape.fitTo(hist2_RooFit)\n",
    "frame = mass.frame()\n",
    "hist2_RooFit.plotOn(frame)\n",
    "signalshape.plotOn(frame)\n",
    "chi2ndf = frame.chiSquare()\n",
    "print(\"chi2/ndf is: \" + str(chi2ndf))\n",
    "area_under_LBG = gauss_LBG_Norm.getValV()\n",
    "print(\"The yield under LBG is : \" + str(area_under_LBG))\n",
    "area_under_signal_shape = Actual_signalshape_Norm.getValV()\n",
    "error_events = Actual_signalshape_Norm.getError()\n",
    "print(\"The yield of the actual events is : \" + str(area_under_signal_shape) + \" + \" + str(error_events))\n",
    "#cout << \"gx_Int[x|signal]_Norm[x] = \" << igx_sig->getVal() << endl\n",
    "#mass_range = (5000, 6000)\n",
    "#for x in mass:\n",
    "    #print(\"x value is: \" + str(x))\n",
    "    #if (myGauss_LBG == Actual_signalshape):\n",
    "     #   print(\"LBG intercepts the actuals signal in: \" + str(x))\n",
    "LBG_range = (5320, 5420)        \n",
    "#print(str(myGauss_LBG.getValV()))        \n",
    "signalshape.plotOn(frame, ROOT.RooFit.Components(\"Actual_signalshape\"), \n",
    "                   ROOT.RooFit.LineColor(8), ROOT.RooFit.LineStyle(2)) # soft green, dotted\n",
    "#signalshape.plotOn(frame, ROOT.RooFit.Components(\"myCB\"), \n",
    "                   #ROOT.RooFit.LineColor(9), ROOT.RooFit.LineStyle(2)) # soft green, dotted\n",
    "signalshape.plotOn(frame, ROOT.RooFit.Components(\"myexponential\"), \n",
    "                   ROOT.RooFit.LineColor(20), ROOT.RooFit.LineStyle(2)) # soft green, dotted\n",
    "signalshape.plotOn(frame, ROOT.RooFit.Components(\"myGauss_LBG\"), \n",
    "                   ROOT.RooFit.LineColor(11), ROOT.RooFit.LineStyle(2)) # soft green, dotted\n",
    "signalshape.plotOn(frame)\n",
    "\n",
    "frame.Draw()\n",
    "c1.SetLogy(0)\n",
    "c1.Update()\n",
    "c1.Draw()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bonus question: Can you estimate how much your cuts have affected the signal yield (i.e. what is the efficiency of your selection cuts?). For this you can try to fit the uncut data. You could also check the events in simulation before and after your selection, and take the ratio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chi2/ndf is: -1.0\n",
      "[#0] ERROR:InputArguments -- RooPlot::findObject(frame_mass_7fe844ecbce0) cannot find object signalshape\n",
      "[#0] ERROR:InputArguments -- RooPlot::chiSquare(frame_mass_7fe844ecbce0) cannot find curve\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##########\n",
    "# Bonus exercise:\n",
    "#  Estimate the signal efficiency of your selection\n",
    "#  Try to optimise your selection (and your fit if necessary) to reach the largest signal yield!\n",
    "##########\n",
    "\n",
    "#plot the pull \n",
    "\n",
    " # Get the pull histogram. That's easy.\n",
    "pullhist = frame.pullHist()\n",
    "\n",
    "  # Define a new canvas. We are going to split it into two pads.\n",
    "cpull = ROOT.TCanvas(\"cpull\",\"cpull\",600,700)\n",
    "  # add two TPads in the single canvas\n",
    "pullpad1 = ROOT.TPad(\"pullpad1\", \"\",0.0,0.25,1.0,1.0)\n",
    "pullpad2 = ROOT.TPad(\"pullpad2\", \"\",0.0,0.0,1.0,0.25)\n",
    "\n",
    "  # Set the right margins\n",
    "pullpad1.SetTopMargin(0.05)\n",
    "pullpad1.SetBottomMargin(0)\n",
    "pullpad1.SetLeftMargin(0.12)\n",
    "pullpad1.SetRightMargin(0.05)\n",
    "pullpad2.SetTopMargin(0)\n",
    "pullpad2.SetBottomMargin(0.25)\n",
    "pullpad2.SetLeftMargin(0.12)\n",
    "pullpad2.SetRightMargin(0.05)\n",
    "\n",
    "  # plot the 'normal' frame on the top pad, this contained our fit curve and data \n",
    "pullpad1.cd()\n",
    "frame.SetTitle(\"\")\n",
    "frame.Draw()\n",
    "\n",
    "  # Now let's plot the pullhist on the bottom pad, and make the labels the right size\n",
    "pullpad2.cd()\n",
    "framepull = mass.frame()\n",
    "framepull.addPlotable(pullhist)\n",
    "framepull.SetTitle(\"\")\n",
    "framepull.GetYaxis().SetTitle(\"Pull\")\n",
    "framepull.GetYaxis().SetTitleOffset(0.4)\n",
    "framepull.GetYaxis().SetTitleSize(0.1)\n",
    "framepull.GetYaxis().SetLabelSize(0.1)\n",
    "framepull.GetXaxis().SetTitleSize(0.1)\n",
    "framepull.GetXaxis().SetLabelSize(0.1)\n",
    "framepull.Draw()\n",
    "\n",
    "  # Draw the pads on the canvas\n",
    "cpull.cd()\n",
    "pullpad1.Draw()\n",
    "pullpad2.Draw()\n",
    "cpull.Update()\n",
    "cpull.Draw()\n",
    "\n",
    "\n",
    "chi2ndf = frame.chiSquare(\"signalshape\", \"hist2_RooFit\")\n",
    "print(\"chi2/ndf is: \" + str(chi2ndf))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c1.SetLogy()\n",
    "c1.Update()\n",
    "c1.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
